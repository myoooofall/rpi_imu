// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_comm.proto

#include "robot_comm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace robot_comm {
class RobotDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot> _instance;
} _Robot_default_instance_;
}  // namespace robot_comm
static void InitDefaultsscc_info_Robot_robot_5fcomm_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::robot_comm::_Robot_default_instance_;
    new (ptr) ::robot_comm::Robot();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::robot_comm::Robot::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Robot_robot_5fcomm_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Robot_robot_5fcomm_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_robot_5fcomm_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_robot_5fcomm_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_robot_5fcomm_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_robot_5fcomm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, robot_num_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, vx_package_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, vy_package_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, vr_package_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, robot_is_report_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, robot_drib_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, robot_chip_or_shoot_),
  PROTOBUF_FIELD_OFFSET(::robot_comm::Robot, robot_boot_power_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::robot_comm::Robot)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::robot_comm::_Robot_default_instance_),
};

const char descriptor_table_protodef_robot_5fcomm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020robot_comm.proto\022\nrobot_comm\"\371\001\n\005Robot"
  "\022\021\n\trobot_num\030\001 \001(\005\022\022\n\nVx_package\030\002 \001(\005\022"
  "\022\n\nVy_package\030\003 \001(\005\022\022\n\nVr_package\030\004 \001(\005\022"
  "\027\n\017Robot_Is_Report\030\005 \001(\010\022\022\n\nRobot_drib\030\006"
  " \001(\005\0228\n\023Robot_Chip_Or_Shoot\030\007 \001(\0162\033.robo"
  "t_comm.Robot.ShootType\022\030\n\020Robot_Boot_Pow"
  "er\030\010 \001(\005\" \n\tShootType\022\t\n\005SHOOT\020\000\022\010\n\004CHIP"
  "\020\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_robot_5fcomm_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_robot_5fcomm_2eproto_sccs[1] = {
  &scc_info_Robot_robot_5fcomm_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_robot_5fcomm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fcomm_2eproto = {
  false, false, descriptor_table_protodef_robot_5fcomm_2eproto, "robot_comm.proto", 290,
  &descriptor_table_robot_5fcomm_2eproto_once, descriptor_table_robot_5fcomm_2eproto_sccs, descriptor_table_robot_5fcomm_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_robot_5fcomm_2eproto::offsets,
  file_level_metadata_robot_5fcomm_2eproto, 1, file_level_enum_descriptors_robot_5fcomm_2eproto, file_level_service_descriptors_robot_5fcomm_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_robot_5fcomm_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_robot_5fcomm_2eproto)), true);
namespace robot_comm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_ShootType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_robot_5fcomm_2eproto);
  return file_level_enum_descriptors_robot_5fcomm_2eproto[0];
}
bool Robot_ShootType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Robot_ShootType Robot::SHOOT;
constexpr Robot_ShootType Robot::CHIP;
constexpr Robot_ShootType Robot::ShootType_MIN;
constexpr Robot_ShootType Robot::ShootType_MAX;
constexpr int Robot::ShootType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Robot::InitAsDefaultInstance() {
}
class Robot::_Internal {
 public:
};

Robot::Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:robot_comm.Robot)
}
Robot::Robot(const Robot& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&robot_num_, &from.robot_num_,
    static_cast<size_t>(reinterpret_cast<char*>(&robot_boot_power_) -
    reinterpret_cast<char*>(&robot_num_)) + sizeof(robot_boot_power_));
  // @@protoc_insertion_point(copy_constructor:robot_comm.Robot)
}

void Robot::SharedCtor() {
  ::memset(&robot_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_boot_power_) -
      reinterpret_cast<char*>(&robot_num_)) + sizeof(robot_boot_power_));
}

Robot::~Robot() {
  // @@protoc_insertion_point(destructor:robot_comm.Robot)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robot::ArenaDtor(void* object) {
  Robot* _this = reinterpret_cast< Robot* >(object);
  (void)_this;
}
void Robot::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot& Robot::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_robot_5fcomm_2eproto.base);
  return *internal_default_instance();
}


void Robot::Clear() {
// @@protoc_insertion_point(message_clear_start:robot_comm.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&robot_num_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&robot_boot_power_) -
      reinterpret_cast<char*>(&robot_num_)) + sizeof(robot_boot_power_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 robot_num = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          robot_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Vx_package = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          vx_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Vy_package = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          vy_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Vr_package = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          vr_package_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool Robot_Is_Report = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          robot_is_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 Robot_drib = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          robot_drib_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .robot_comm.Robot.ShootType Robot_Chip_Or_Shoot = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_robot_chip_or_shoot(static_cast<::robot_comm::Robot_ShootType>(val));
        } else goto handle_unusual;
        continue;
      // int32 Robot_Boot_Power = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          robot_boot_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:robot_comm.Robot)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robot_num = 1;
  if (this->robot_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robot_num(), target);
  }

  // int32 Vx_package = 2;
  if (this->vx_package() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_vx_package(), target);
  }

  // int32 Vy_package = 3;
  if (this->vy_package() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_vy_package(), target);
  }

  // int32 Vr_package = 4;
  if (this->vr_package() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_vr_package(), target);
  }

  // bool Robot_Is_Report = 5;
  if (this->robot_is_report() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_robot_is_report(), target);
  }

  // int32 Robot_drib = 6;
  if (this->robot_drib() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_robot_drib(), target);
  }

  // .robot_comm.Robot.ShootType Robot_Chip_Or_Shoot = 7;
  if (this->robot_chip_or_shoot() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_robot_chip_or_shoot(), target);
  }

  // int32 Robot_Boot_Power = 8;
  if (this->robot_boot_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_robot_boot_power(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:robot_comm.Robot)
  return target;
}

size_t Robot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:robot_comm.Robot)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 robot_num = 1;
  if (this->robot_num() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_num());
  }

  // int32 Vx_package = 2;
  if (this->vx_package() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vx_package());
  }

  // int32 Vy_package = 3;
  if (this->vy_package() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vy_package());
  }

  // int32 Vr_package = 4;
  if (this->vr_package() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_vr_package());
  }

  // bool Robot_Is_Report = 5;
  if (this->robot_is_report() != 0) {
    total_size += 1 + 1;
  }

  // int32 Robot_drib = 6;
  if (this->robot_drib() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_drib());
  }

  // .robot_comm.Robot.ShootType Robot_Chip_Or_Shoot = 7;
  if (this->robot_chip_or_shoot() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_robot_chip_or_shoot());
  }

  // int32 Robot_Boot_Power = 8;
  if (this->robot_boot_power() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_boot_power());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:robot_comm.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:robot_comm.Robot)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:robot_comm.Robot)
    MergeFrom(*source);
  }
}

void Robot::MergeFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:robot_comm.Robot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.robot_num() != 0) {
    _internal_set_robot_num(from._internal_robot_num());
  }
  if (from.vx_package() != 0) {
    _internal_set_vx_package(from._internal_vx_package());
  }
  if (from.vy_package() != 0) {
    _internal_set_vy_package(from._internal_vy_package());
  }
  if (from.vr_package() != 0) {
    _internal_set_vr_package(from._internal_vr_package());
  }
  if (from.robot_is_report() != 0) {
    _internal_set_robot_is_report(from._internal_robot_is_report());
  }
  if (from.robot_drib() != 0) {
    _internal_set_robot_drib(from._internal_robot_drib());
  }
  if (from.robot_chip_or_shoot() != 0) {
    _internal_set_robot_chip_or_shoot(from._internal_robot_chip_or_shoot());
  }
  if (from.robot_boot_power() != 0) {
    _internal_set_robot_boot_power(from._internal_robot_boot_power());
  }
}

void Robot::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:robot_comm.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot::CopyFrom(const Robot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:robot_comm.Robot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot::IsInitialized() const {
  return true;
}

void Robot::InternalSwap(Robot* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot, robot_boot_power_)
      + sizeof(Robot::robot_boot_power_)
      - PROTOBUF_FIELD_OFFSET(Robot, robot_num_)>(
          reinterpret_cast<char*>(&robot_num_),
          reinterpret_cast<char*>(&other->robot_num_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace robot_comm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::robot_comm::Robot* Arena::CreateMaybeMessage< ::robot_comm::Robot >(Arena* arena) {
  return Arena::CreateMessageInternal< ::robot_comm::Robot >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
