// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: robot_comm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_robot_5fcomm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_robot_5fcomm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_robot_5fcomm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_robot_5fcomm_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_robot_5fcomm_2eproto;
namespace robot_comm {
class Robot;
class RobotDefaultTypeInternal;
extern RobotDefaultTypeInternal _Robot_default_instance_;
}  // namespace robot_comm
PROTOBUF_NAMESPACE_OPEN
template<> ::robot_comm::Robot* Arena::CreateMaybeMessage<::robot_comm::Robot>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace robot_comm {

enum Robot_ShootType : int {
  Robot_ShootType_SHOOT = 0,
  Robot_ShootType_CHIP = 1,
  Robot_ShootType_Robot_ShootType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Robot_ShootType_Robot_ShootType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Robot_ShootType_IsValid(int value);
constexpr Robot_ShootType Robot_ShootType_ShootType_MIN = Robot_ShootType_SHOOT;
constexpr Robot_ShootType Robot_ShootType_ShootType_MAX = Robot_ShootType_CHIP;
constexpr int Robot_ShootType_ShootType_ARRAYSIZE = Robot_ShootType_ShootType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_ShootType_descriptor();
template<typename T>
inline const std::string& Robot_ShootType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Robot_ShootType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Robot_ShootType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Robot_ShootType_descriptor(), enum_t_value);
}
inline bool Robot_ShootType_Parse(
    const std::string& name, Robot_ShootType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Robot_ShootType>(
    Robot_ShootType_descriptor(), name, value);
}
// ===================================================================

class Robot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:robot_comm.Robot) */ {
 public:
  inline Robot() : Robot(nullptr) {};
  virtual ~Robot();

  Robot(const Robot& from);
  Robot(Robot&& from) noexcept
    : Robot() {
    *this = ::std::move(from);
  }

  inline Robot& operator=(const Robot& from) {
    CopyFrom(from);
    return *this;
  }
  inline Robot& operator=(Robot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Robot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Robot* internal_default_instance() {
    return reinterpret_cast<const Robot*>(
               &_Robot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Robot& a, Robot& b) {
    a.Swap(&b);
  }
  inline void Swap(Robot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Robot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Robot* New() const final {
    return CreateMaybeMessage<Robot>(nullptr);
  }

  Robot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Robot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Robot& from);
  void MergeFrom(const Robot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Robot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "robot_comm.Robot";
  }
  protected:
  explicit Robot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_robot_5fcomm_2eproto);
    return ::descriptor_table_robot_5fcomm_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Robot_ShootType ShootType;
  static constexpr ShootType SHOOT =
    Robot_ShootType_SHOOT;
  static constexpr ShootType CHIP =
    Robot_ShootType_CHIP;
  static inline bool ShootType_IsValid(int value) {
    return Robot_ShootType_IsValid(value);
  }
  static constexpr ShootType ShootType_MIN =
    Robot_ShootType_ShootType_MIN;
  static constexpr ShootType ShootType_MAX =
    Robot_ShootType_ShootType_MAX;
  static constexpr int ShootType_ARRAYSIZE =
    Robot_ShootType_ShootType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ShootType_descriptor() {
    return Robot_ShootType_descriptor();
  }
  template<typename T>
  static inline const std::string& ShootType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ShootType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ShootType_Name.");
    return Robot_ShootType_Name(enum_t_value);
  }
  static inline bool ShootType_Parse(const std::string& name,
      ShootType* value) {
    return Robot_ShootType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRobotNumFieldNumber = 1,
    kVxPackageFieldNumber = 2,
    kVyPackageFieldNumber = 3,
    kVrPackageFieldNumber = 4,
    kRobotIsReportFieldNumber = 5,
    kRobotDribFieldNumber = 6,
    kRobotChipOrShootFieldNumber = 7,
    kRobotBootPowerFieldNumber = 8,
  };
  // int32 robot_num = 1;
  void clear_robot_num();
  ::PROTOBUF_NAMESPACE_ID::int32 robot_num() const;
  void set_robot_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robot_num() const;
  void _internal_set_robot_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Vx_package = 2;
  void clear_vx_package();
  ::PROTOBUF_NAMESPACE_ID::int32 vx_package() const;
  void set_vx_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vx_package() const;
  void _internal_set_vx_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Vy_package = 3;
  void clear_vy_package();
  ::PROTOBUF_NAMESPACE_ID::int32 vy_package() const;
  void set_vy_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vy_package() const;
  void _internal_set_vy_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 Vr_package = 4;
  void clear_vr_package();
  ::PROTOBUF_NAMESPACE_ID::int32 vr_package() const;
  void set_vr_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_vr_package() const;
  void _internal_set_vr_package(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool Robot_Is_Report = 5;
  void clear_robot_is_report();
  bool robot_is_report() const;
  void set_robot_is_report(bool value);
  private:
  bool _internal_robot_is_report() const;
  void _internal_set_robot_is_report(bool value);
  public:

  // int32 Robot_drib = 6;
  void clear_robot_drib();
  ::PROTOBUF_NAMESPACE_ID::int32 robot_drib() const;
  void set_robot_drib(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robot_drib() const;
  void _internal_set_robot_drib(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .robot_comm.Robot.ShootType Robot_Chip_Or_Shoot = 7;
  void clear_robot_chip_or_shoot();
  ::robot_comm::Robot_ShootType robot_chip_or_shoot() const;
  void set_robot_chip_or_shoot(::robot_comm::Robot_ShootType value);
  private:
  ::robot_comm::Robot_ShootType _internal_robot_chip_or_shoot() const;
  void _internal_set_robot_chip_or_shoot(::robot_comm::Robot_ShootType value);
  public:

  // int32 Robot_Boot_Power = 8;
  void clear_robot_boot_power();
  ::PROTOBUF_NAMESPACE_ID::int32 robot_boot_power() const;
  void set_robot_boot_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_robot_boot_power() const;
  void _internal_set_robot_boot_power(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:robot_comm.Robot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 robot_num_;
  ::PROTOBUF_NAMESPACE_ID::int32 vx_package_;
  ::PROTOBUF_NAMESPACE_ID::int32 vy_package_;
  ::PROTOBUF_NAMESPACE_ID::int32 vr_package_;
  bool robot_is_report_;
  ::PROTOBUF_NAMESPACE_ID::int32 robot_drib_;
  int robot_chip_or_shoot_;
  ::PROTOBUF_NAMESPACE_ID::int32 robot_boot_power_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_robot_5fcomm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Robot

// int32 robot_num = 1;
inline void Robot::clear_robot_num() {
  robot_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_robot_num() const {
  return robot_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::robot_num() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.robot_num)
  return _internal_robot_num();
}
inline void Robot::_internal_set_robot_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robot_num_ = value;
}
inline void Robot::set_robot_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robot_num(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.robot_num)
}

// int32 Vx_package = 2;
inline void Robot::clear_vx_package() {
  vx_package_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_vx_package() const {
  return vx_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::vx_package() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Vx_package)
  return _internal_vx_package();
}
inline void Robot::_internal_set_vx_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vx_package_ = value;
}
inline void Robot::set_vx_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vx_package(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Vx_package)
}

// int32 Vy_package = 3;
inline void Robot::clear_vy_package() {
  vy_package_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_vy_package() const {
  return vy_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::vy_package() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Vy_package)
  return _internal_vy_package();
}
inline void Robot::_internal_set_vy_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vy_package_ = value;
}
inline void Robot::set_vy_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vy_package(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Vy_package)
}

// int32 Vr_package = 4;
inline void Robot::clear_vr_package() {
  vr_package_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_vr_package() const {
  return vr_package_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::vr_package() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Vr_package)
  return _internal_vr_package();
}
inline void Robot::_internal_set_vr_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  vr_package_ = value;
}
inline void Robot::set_vr_package(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_vr_package(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Vr_package)
}

// bool Robot_Is_Report = 5;
inline void Robot::clear_robot_is_report() {
  robot_is_report_ = false;
}
inline bool Robot::_internal_robot_is_report() const {
  return robot_is_report_;
}
inline bool Robot::robot_is_report() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Robot_Is_Report)
  return _internal_robot_is_report();
}
inline void Robot::_internal_set_robot_is_report(bool value) {
  
  robot_is_report_ = value;
}
inline void Robot::set_robot_is_report(bool value) {
  _internal_set_robot_is_report(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Robot_Is_Report)
}

// int32 Robot_drib = 6;
inline void Robot::clear_robot_drib() {
  robot_drib_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_robot_drib() const {
  return robot_drib_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::robot_drib() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Robot_drib)
  return _internal_robot_drib();
}
inline void Robot::_internal_set_robot_drib(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robot_drib_ = value;
}
inline void Robot::set_robot_drib(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robot_drib(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Robot_drib)
}

// .robot_comm.Robot.ShootType Robot_Chip_Or_Shoot = 7;
inline void Robot::clear_robot_chip_or_shoot() {
  robot_chip_or_shoot_ = 0;
}
inline ::robot_comm::Robot_ShootType Robot::_internal_robot_chip_or_shoot() const {
  return static_cast< ::robot_comm::Robot_ShootType >(robot_chip_or_shoot_);
}
inline ::robot_comm::Robot_ShootType Robot::robot_chip_or_shoot() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Robot_Chip_Or_Shoot)
  return _internal_robot_chip_or_shoot();
}
inline void Robot::_internal_set_robot_chip_or_shoot(::robot_comm::Robot_ShootType value) {
  
  robot_chip_or_shoot_ = value;
}
inline void Robot::set_robot_chip_or_shoot(::robot_comm::Robot_ShootType value) {
  _internal_set_robot_chip_or_shoot(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Robot_Chip_Or_Shoot)
}

// int32 Robot_Boot_Power = 8;
inline void Robot::clear_robot_boot_power() {
  robot_boot_power_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::_internal_robot_boot_power() const {
  return robot_boot_power_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Robot::robot_boot_power() const {
  // @@protoc_insertion_point(field_get:robot_comm.Robot.Robot_Boot_Power)
  return _internal_robot_boot_power();
}
inline void Robot::_internal_set_robot_boot_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  robot_boot_power_ = value;
}
inline void Robot::set_robot_boot_power(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_robot_boot_power(value);
  // @@protoc_insertion_point(field_set:robot_comm.Robot.Robot_Boot_Power)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace robot_comm

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::robot_comm::Robot_ShootType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::robot_comm::Robot_ShootType>() {
  return ::robot_comm::Robot_ShootType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_robot_5fcomm_2eproto
