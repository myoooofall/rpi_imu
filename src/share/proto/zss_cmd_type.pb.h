// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd_type.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_zss_5fcmd_5ftype_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_zss_5fcmd_5ftype_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_zss_5fcmd_5ftype_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fcmd_5ftype_2eproto;
namespace ZSS {
namespace New {
class CmdChase;
class CmdChaseDefaultTypeInternal;
extern CmdChaseDefaultTypeInternal _CmdChase_default_instance_;
class CmdPose;
class CmdPoseDefaultTypeInternal;
extern CmdPoseDefaultTypeInternal _CmdPose_default_instance_;
class CmdPoseConfig;
class CmdPoseConfigDefaultTypeInternal;
extern CmdPoseConfigDefaultTypeInternal _CmdPoseConfig_default_instance_;
class CmdVel;
class CmdVelDefaultTypeInternal;
extern CmdVelDefaultTypeInternal _CmdVel_default_instance_;
class CmdWheel;
class CmdWheelDefaultTypeInternal;
extern CmdWheelDefaultTypeInternal _CmdWheel_default_instance_;
class Odom;
class OdomDefaultTypeInternal;
extern OdomDefaultTypeInternal _Odom_default_instance_;
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class Twist;
class TwistDefaultTypeInternal;
extern TwistDefaultTypeInternal _Twist_default_instance_;
}  // namespace New
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> ::ZSS::New::CmdChase* Arena::CreateMaybeMessage<::ZSS::New::CmdChase>(Arena*);
template<> ::ZSS::New::CmdPose* Arena::CreateMaybeMessage<::ZSS::New::CmdPose>(Arena*);
template<> ::ZSS::New::CmdPoseConfig* Arena::CreateMaybeMessage<::ZSS::New::CmdPoseConfig>(Arena*);
template<> ::ZSS::New::CmdVel* Arena::CreateMaybeMessage<::ZSS::New::CmdVel>(Arena*);
template<> ::ZSS::New::CmdWheel* Arena::CreateMaybeMessage<::ZSS::New::CmdWheel>(Arena*);
template<> ::ZSS::New::Odom* Arena::CreateMaybeMessage<::ZSS::New::Odom>(Arena*);
template<> ::ZSS::New::Pose* Arena::CreateMaybeMessage<::ZSS::New::Pose>(Arena*);
template<> ::ZSS::New::Twist* Arena::CreateMaybeMessage<::ZSS::New::Twist>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ZSS {
namespace New {

// ===================================================================

class Pose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {};
  virtual ~Pose();

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose* New() const final {
    return CreateMaybeMessage<Pose>(nullptr);
  }

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose& from);
  void MergeFrom(const Pose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class Twist PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.Twist) */ {
 public:
  inline Twist() : Twist(nullptr) {};
  virtual ~Twist();

  Twist(const Twist& from);
  Twist(Twist&& from) noexcept
    : Twist() {
    *this = ::std::move(from);
  }

  inline Twist& operator=(const Twist& from) {
    CopyFrom(from);
    return *this;
  }
  inline Twist& operator=(Twist&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Twist& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Twist* internal_default_instance() {
    return reinterpret_cast<const Twist*>(
               &_Twist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Twist& a, Twist& b) {
    a.Swap(&b);
  }
  inline void Swap(Twist* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Twist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Twist* New() const final {
    return CreateMaybeMessage<Twist>(nullptr);
  }

  Twist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Twist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Twist& from);
  void MergeFrom(const Twist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Twist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.Twist";
  }
  protected:
  explicit Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kWFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float w = 3;
  void clear_w();
  float w() const;
  void set_w(float value);
  private:
  float _internal_w() const;
  void _internal_set_w(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.Twist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float w_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class Odom PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.Odom) */ {
 public:
  inline Odom() : Odom(nullptr) {};
  virtual ~Odom();

  Odom(const Odom& from);
  Odom(Odom&& from) noexcept
    : Odom() {
    *this = ::std::move(from);
  }

  inline Odom& operator=(const Odom& from) {
    CopyFrom(from);
    return *this;
  }
  inline Odom& operator=(Odom&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Odom& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Odom* internal_default_instance() {
    return reinterpret_cast<const Odom*>(
               &_Odom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Odom& a, Odom& b) {
    a.Swap(&b);
  }
  inline void Swap(Odom* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Odom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Odom* New() const final {
    return CreateMaybeMessage<Odom>(nullptr);
  }

  Odom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Odom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Odom& from);
  void MergeFrom(const Odom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Odom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.Odom";
  }
  protected:
  explicit Odom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPosesFieldNumber = 1,
  };
  // repeated .ZSS.New.Pose poses = 1;
  int poses_size() const;
  private:
  int _internal_poses_size() const;
  public:
  void clear_poses();
  ::ZSS::New::Pose* mutable_poses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::New::Pose >*
      mutable_poses();
  private:
  const ::ZSS::New::Pose& _internal_poses(int index) const;
  ::ZSS::New::Pose* _internal_add_poses();
  public:
  const ::ZSS::New::Pose& poses(int index) const;
  ::ZSS::New::Pose* add_poses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::New::Pose >&
      poses() const;

  // @@protoc_insertion_point(class_scope:ZSS.New.Odom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::New::Pose > poses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CmdWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.CmdWheel) */ {
 public:
  inline CmdWheel() : CmdWheel(nullptr) {};
  virtual ~CmdWheel();

  CmdWheel(const CmdWheel& from);
  CmdWheel(CmdWheel&& from) noexcept
    : CmdWheel() {
    *this = ::std::move(from);
  }

  inline CmdWheel& operator=(const CmdWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdWheel& operator=(CmdWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdWheel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdWheel* internal_default_instance() {
    return reinterpret_cast<const CmdWheel*>(
               &_CmdWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CmdWheel& a, CmdWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdWheel* New() const final {
    return CreateMaybeMessage<CmdWheel>(nullptr);
  }

  CmdWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdWheel& from);
  void MergeFrom(const CmdWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.CmdWheel";
  }
  protected:
  explicit CmdWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWheel1FieldNumber = 1,
    kWheel2FieldNumber = 2,
    kWheel3FieldNumber = 3,
    kWheel4FieldNumber = 4,
  };
  // float wheel1 = 1;
  void clear_wheel1();
  float wheel1() const;
  void set_wheel1(float value);
  private:
  float _internal_wheel1() const;
  void _internal_set_wheel1(float value);
  public:

  // float wheel2 = 2;
  void clear_wheel2();
  float wheel2() const;
  void set_wheel2(float value);
  private:
  float _internal_wheel2() const;
  void _internal_set_wheel2(float value);
  public:

  // float wheel3 = 3;
  void clear_wheel3();
  float wheel3() const;
  void set_wheel3(float value);
  private:
  float _internal_wheel3() const;
  void _internal_set_wheel3(float value);
  public:

  // float wheel4 = 4;
  void clear_wheel4();
  float wheel4() const;
  void set_wheel4(float value);
  private:
  float _internal_wheel4() const;
  void _internal_set_wheel4(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.CmdWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float wheel1_;
  float wheel2_;
  float wheel3_;
  float wheel4_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CmdVel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.CmdVel) */ {
 public:
  inline CmdVel() : CmdVel(nullptr) {};
  virtual ~CmdVel();

  CmdVel(const CmdVel& from);
  CmdVel(CmdVel&& from) noexcept
    : CmdVel() {
    *this = ::std::move(from);
  }

  inline CmdVel& operator=(const CmdVel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdVel& operator=(CmdVel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdVel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdVel* internal_default_instance() {
    return reinterpret_cast<const CmdVel*>(
               &_CmdVel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CmdVel& a, CmdVel& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdVel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdVel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdVel* New() const final {
    return CreateMaybeMessage<CmdVel>(nullptr);
  }

  CmdVel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdVel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdVel& from);
  void MergeFrom(const CmdVel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdVel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.CmdVel";
  }
  protected:
  explicit CmdVel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVelocityXFieldNumber = 1,
    kVelocityYFieldNumber = 2,
    kUseImuFieldNumber = 3,
    kVelocityRFieldNumber = 4,
    kImuThetaFieldNumber = 5,
  };
  // float velocity_x = 1;
  void clear_velocity_x();
  float velocity_x() const;
  void set_velocity_x(float value);
  private:
  float _internal_velocity_x() const;
  void _internal_set_velocity_x(float value);
  public:

  // float velocity_y = 2;
  void clear_velocity_y();
  float velocity_y() const;
  void set_velocity_y(float value);
  private:
  float _internal_velocity_y() const;
  void _internal_set_velocity_y(float value);
  public:

  // bool use_imu = 3;
  void clear_use_imu();
  bool use_imu() const;
  void set_use_imu(bool value);
  private:
  bool _internal_use_imu() const;
  void _internal_set_use_imu(bool value);
  public:

  // float velocity_r = 4;
  void clear_velocity_r();
  float velocity_r() const;
  void set_velocity_r(float value);
  private:
  float _internal_velocity_r() const;
  void _internal_set_velocity_r(float value);
  public:

  // float imu_theta = 5;
  void clear_imu_theta();
  float imu_theta() const;
  void set_imu_theta(float value);
  private:
  float _internal_imu_theta() const;
  void _internal_set_imu_theta(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.CmdVel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float velocity_x_;
  float velocity_y_;
  bool use_imu_;
  float velocity_r_;
  float imu_theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CmdPoseConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.CmdPoseConfig) */ {
 public:
  inline CmdPoseConfig() : CmdPoseConfig(nullptr) {};
  virtual ~CmdPoseConfig();

  CmdPoseConfig(const CmdPoseConfig& from);
  CmdPoseConfig(CmdPoseConfig&& from) noexcept
    : CmdPoseConfig() {
    *this = ::std::move(from);
  }

  inline CmdPoseConfig& operator=(const CmdPoseConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdPoseConfig& operator=(CmdPoseConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdPoseConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdPoseConfig* internal_default_instance() {
    return reinterpret_cast<const CmdPoseConfig*>(
               &_CmdPoseConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CmdPoseConfig& a, CmdPoseConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdPoseConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdPoseConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdPoseConfig* New() const final {
    return CreateMaybeMessage<CmdPoseConfig>(nullptr);
  }

  CmdPoseConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdPoseConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdPoseConfig& from);
  void MergeFrom(const CmdPoseConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdPoseConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.CmdPoseConfig";
  }
  protected:
  explicit CmdPoseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMaxVxFieldNumber = 1,
    kMaxVyFieldNumber = 2,
    kMaxVwFieldNumber = 3,
    kMaxAxFieldNumber = 4,
    kMaxAyFieldNumber = 5,
    kMaxAwFieldNumber = 6,
  };
  // float max_vx = 1;
  void clear_max_vx();
  float max_vx() const;
  void set_max_vx(float value);
  private:
  float _internal_max_vx() const;
  void _internal_set_max_vx(float value);
  public:

  // float max_vy = 2;
  void clear_max_vy();
  float max_vy() const;
  void set_max_vy(float value);
  private:
  float _internal_max_vy() const;
  void _internal_set_max_vy(float value);
  public:

  // float max_vw = 3;
  void clear_max_vw();
  float max_vw() const;
  void set_max_vw(float value);
  private:
  float _internal_max_vw() const;
  void _internal_set_max_vw(float value);
  public:

  // float max_ax = 4;
  void clear_max_ax();
  float max_ax() const;
  void set_max_ax(float value);
  private:
  float _internal_max_ax() const;
  void _internal_set_max_ax(float value);
  public:

  // float max_ay = 5;
  void clear_max_ay();
  float max_ay() const;
  void set_max_ay(float value);
  private:
  float _internal_max_ay() const;
  void _internal_set_max_ay(float value);
  public:

  // float max_aw = 6;
  void clear_max_aw();
  float max_aw() const;
  void set_max_aw(float value);
  private:
  float _internal_max_aw() const;
  void _internal_set_max_aw(float value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.CmdPoseConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float max_vx_;
  float max_vy_;
  float max_vw_;
  float max_ax_;
  float max_ay_;
  float max_aw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CmdPose PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.CmdPose) */ {
 public:
  inline CmdPose() : CmdPose(nullptr) {};
  virtual ~CmdPose();

  CmdPose(const CmdPose& from);
  CmdPose(CmdPose&& from) noexcept
    : CmdPose() {
    *this = ::std::move(from);
  }

  inline CmdPose& operator=(const CmdPose& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdPose& operator=(CmdPose&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdPose& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdPose* internal_default_instance() {
    return reinterpret_cast<const CmdPose*>(
               &_CmdPose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CmdPose& a, CmdPose& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdPose* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdPose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdPose* New() const final {
    return CreateMaybeMessage<CmdPose>(nullptr);
  }

  CmdPose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdPose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdPose& from);
  void MergeFrom(const CmdPose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdPose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.CmdPose";
  }
  protected:
  explicit CmdPose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kStartVFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTargetVFieldNumber = 4,
    kConfigFieldNumber = 7,
    kRotationSenseFieldNumber = 5,
    kUseConfigFieldNumber = 6,
  };
  // .ZSS.New.Pose start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::ZSS::New::Pose& start() const;
  ::ZSS::New::Pose* release_start();
  ::ZSS::New::Pose* mutable_start();
  void set_allocated_start(::ZSS::New::Pose* start);
  private:
  const ::ZSS::New::Pose& _internal_start() const;
  ::ZSS::New::Pose* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::ZSS::New::Pose* start);
  ::ZSS::New::Pose* unsafe_arena_release_start();

  // .ZSS.New.Twist start_v = 2;
  bool has_start_v() const;
  private:
  bool _internal_has_start_v() const;
  public:
  void clear_start_v();
  const ::ZSS::New::Twist& start_v() const;
  ::ZSS::New::Twist* release_start_v();
  ::ZSS::New::Twist* mutable_start_v();
  void set_allocated_start_v(::ZSS::New::Twist* start_v);
  private:
  const ::ZSS::New::Twist& _internal_start_v() const;
  ::ZSS::New::Twist* _internal_mutable_start_v();
  public:
  void unsafe_arena_set_allocated_start_v(
      ::ZSS::New::Twist* start_v);
  ::ZSS::New::Twist* unsafe_arena_release_start_v();

  // .ZSS.New.Pose target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::ZSS::New::Pose& target() const;
  ::ZSS::New::Pose* release_target();
  ::ZSS::New::Pose* mutable_target();
  void set_allocated_target(::ZSS::New::Pose* target);
  private:
  const ::ZSS::New::Pose& _internal_target() const;
  ::ZSS::New::Pose* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::ZSS::New::Pose* target);
  ::ZSS::New::Pose* unsafe_arena_release_target();

  // .ZSS.New.Twist target_v = 4;
  bool has_target_v() const;
  private:
  bool _internal_has_target_v() const;
  public:
  void clear_target_v();
  const ::ZSS::New::Twist& target_v() const;
  ::ZSS::New::Twist* release_target_v();
  ::ZSS::New::Twist* mutable_target_v();
  void set_allocated_target_v(::ZSS::New::Twist* target_v);
  private:
  const ::ZSS::New::Twist& _internal_target_v() const;
  ::ZSS::New::Twist* _internal_mutable_target_v();
  public:
  void unsafe_arena_set_allocated_target_v(
      ::ZSS::New::Twist* target_v);
  ::ZSS::New::Twist* unsafe_arena_release_target_v();

  // .ZSS.New.CmdPoseConfig config = 7;
  bool has_config() const;
  private:
  bool _internal_has_config() const;
  public:
  void clear_config();
  const ::ZSS::New::CmdPoseConfig& config() const;
  ::ZSS::New::CmdPoseConfig* release_config();
  ::ZSS::New::CmdPoseConfig* mutable_config();
  void set_allocated_config(::ZSS::New::CmdPoseConfig* config);
  private:
  const ::ZSS::New::CmdPoseConfig& _internal_config() const;
  ::ZSS::New::CmdPoseConfig* _internal_mutable_config();
  public:
  void unsafe_arena_set_allocated_config(
      ::ZSS::New::CmdPoseConfig* config);
  ::ZSS::New::CmdPoseConfig* unsafe_arena_release_config();

  // int32 rotation_sense = 5;
  void clear_rotation_sense();
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_sense() const;
  void set_rotation_sense(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rotation_sense() const;
  void _internal_set_rotation_sense(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool use_config = 6;
  void clear_use_config();
  bool use_config() const;
  void set_use_config(bool value);
  private:
  bool _internal_use_config() const;
  void _internal_set_use_config(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ZSS.New.CmdPose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ZSS::New::Pose* start_;
  ::ZSS::New::Twist* start_v_;
  ::ZSS::New::Pose* target_;
  ::ZSS::New::Twist* target_v_;
  ::ZSS::New::CmdPoseConfig* config_;
  ::PROTOBUF_NAMESPACE_ID::int32 rotation_sense_;
  bool use_config_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// -------------------------------------------------------------------

class CmdChase PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ZSS.New.CmdChase) */ {
 public:
  inline CmdChase() : CmdChase(nullptr) {};
  virtual ~CmdChase();

  CmdChase(const CmdChase& from);
  CmdChase(CmdChase&& from) noexcept
    : CmdChase() {
    *this = ::std::move(from);
  }

  inline CmdChase& operator=(const CmdChase& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdChase& operator=(CmdChase&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CmdChase& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CmdChase* internal_default_instance() {
    return reinterpret_cast<const CmdChase*>(
               &_CmdChase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CmdChase& a, CmdChase& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdChase* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdChase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CmdChase* New() const final {
    return CreateMaybeMessage<CmdChase>(nullptr);
  }

  CmdChase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CmdChase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CmdChase& from);
  void MergeFrom(const CmdChase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdChase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ZSS.New.CmdChase";
  }
  protected:
  explicit CmdChase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_zss_5fcmd_5ftype_2eproto);
    return ::descriptor_table_zss_5fcmd_5ftype_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kStartVFieldNumber = 2,
    kBallFieldNumber = 3,
    kBallVFieldNumber = 4,
  };
  // .ZSS.New.Pose start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::ZSS::New::Pose& start() const;
  ::ZSS::New::Pose* release_start();
  ::ZSS::New::Pose* mutable_start();
  void set_allocated_start(::ZSS::New::Pose* start);
  private:
  const ::ZSS::New::Pose& _internal_start() const;
  ::ZSS::New::Pose* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::ZSS::New::Pose* start);
  ::ZSS::New::Pose* unsafe_arena_release_start();

  // .ZSS.New.Twist start_v = 2;
  bool has_start_v() const;
  private:
  bool _internal_has_start_v() const;
  public:
  void clear_start_v();
  const ::ZSS::New::Twist& start_v() const;
  ::ZSS::New::Twist* release_start_v();
  ::ZSS::New::Twist* mutable_start_v();
  void set_allocated_start_v(::ZSS::New::Twist* start_v);
  private:
  const ::ZSS::New::Twist& _internal_start_v() const;
  ::ZSS::New::Twist* _internal_mutable_start_v();
  public:
  void unsafe_arena_set_allocated_start_v(
      ::ZSS::New::Twist* start_v);
  ::ZSS::New::Twist* unsafe_arena_release_start_v();

  // .ZSS.New.Pose ball = 3;
  bool has_ball() const;
  private:
  bool _internal_has_ball() const;
  public:
  void clear_ball();
  const ::ZSS::New::Pose& ball() const;
  ::ZSS::New::Pose* release_ball();
  ::ZSS::New::Pose* mutable_ball();
  void set_allocated_ball(::ZSS::New::Pose* ball);
  private:
  const ::ZSS::New::Pose& _internal_ball() const;
  ::ZSS::New::Pose* _internal_mutable_ball();
  public:
  void unsafe_arena_set_allocated_ball(
      ::ZSS::New::Pose* ball);
  ::ZSS::New::Pose* unsafe_arena_release_ball();

  // .ZSS.New.Twist ball_v = 4;
  bool has_ball_v() const;
  private:
  bool _internal_has_ball_v() const;
  public:
  void clear_ball_v();
  const ::ZSS::New::Twist& ball_v() const;
  ::ZSS::New::Twist* release_ball_v();
  ::ZSS::New::Twist* mutable_ball_v();
  void set_allocated_ball_v(::ZSS::New::Twist* ball_v);
  private:
  const ::ZSS::New::Twist& _internal_ball_v() const;
  ::ZSS::New::Twist* _internal_mutable_ball_v();
  public:
  void unsafe_arena_set_allocated_ball_v(
      ::ZSS::New::Twist* ball_v);
  ::ZSS::New::Twist* unsafe_arena_release_ball_v();

  // @@protoc_insertion_point(class_scope:ZSS.New.CmdChase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ZSS::New::Pose* start_;
  ::ZSS::New::Twist* start_v_;
  ::ZSS::New::Pose* ball_;
  ::ZSS::New::Twist* ball_v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_zss_5fcmd_5ftype_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose

// float x = 1;
inline void Pose::clear_x() {
  x_ = 0;
}
inline float Pose::_internal_x() const {
  return x_;
}
inline float Pose::x() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Pose.x)
  return _internal_x();
}
inline void Pose::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Pose::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Pose.x)
}

// float y = 2;
inline void Pose::clear_y() {
  y_ = 0;
}
inline float Pose::_internal_y() const {
  return y_;
}
inline float Pose::y() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Pose.y)
  return _internal_y();
}
inline void Pose::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Pose::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Pose.y)
}

// float w = 3;
inline void Pose::clear_w() {
  w_ = 0;
}
inline float Pose::_internal_w() const {
  return w_;
}
inline float Pose::w() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Pose.w)
  return _internal_w();
}
inline void Pose::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Pose::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Pose.w)
}

// -------------------------------------------------------------------

// Twist

// float x = 1;
inline void Twist::clear_x() {
  x_ = 0;
}
inline float Twist::_internal_x() const {
  return x_;
}
inline float Twist::x() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Twist.x)
  return _internal_x();
}
inline void Twist::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Twist::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Twist.x)
}

// float y = 2;
inline void Twist::clear_y() {
  y_ = 0;
}
inline float Twist::_internal_y() const {
  return y_;
}
inline float Twist::y() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Twist.y)
  return _internal_y();
}
inline void Twist::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Twist::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Twist.y)
}

// float w = 3;
inline void Twist::clear_w() {
  w_ = 0;
}
inline float Twist::_internal_w() const {
  return w_;
}
inline float Twist::w() const {
  // @@protoc_insertion_point(field_get:ZSS.New.Twist.w)
  return _internal_w();
}
inline void Twist::_internal_set_w(float value) {
  
  w_ = value;
}
inline void Twist::set_w(float value) {
  _internal_set_w(value);
  // @@protoc_insertion_point(field_set:ZSS.New.Twist.w)
}

// -------------------------------------------------------------------

// Odom

// repeated .ZSS.New.Pose poses = 1;
inline int Odom::_internal_poses_size() const {
  return poses_.size();
}
inline int Odom::poses_size() const {
  return _internal_poses_size();
}
inline void Odom::clear_poses() {
  poses_.Clear();
}
inline ::ZSS::New::Pose* Odom::mutable_poses(int index) {
  // @@protoc_insertion_point(field_mutable:ZSS.New.Odom.poses)
  return poses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::New::Pose >*
Odom::mutable_poses() {
  // @@protoc_insertion_point(field_mutable_list:ZSS.New.Odom.poses)
  return &poses_;
}
inline const ::ZSS::New::Pose& Odom::_internal_poses(int index) const {
  return poses_.Get(index);
}
inline const ::ZSS::New::Pose& Odom::poses(int index) const {
  // @@protoc_insertion_point(field_get:ZSS.New.Odom.poses)
  return _internal_poses(index);
}
inline ::ZSS::New::Pose* Odom::_internal_add_poses() {
  return poses_.Add();
}
inline ::ZSS::New::Pose* Odom::add_poses() {
  // @@protoc_insertion_point(field_add:ZSS.New.Odom.poses)
  return _internal_add_poses();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ZSS::New::Pose >&
Odom::poses() const {
  // @@protoc_insertion_point(field_list:ZSS.New.Odom.poses)
  return poses_;
}

// -------------------------------------------------------------------

// CmdWheel

// float wheel1 = 1;
inline void CmdWheel::clear_wheel1() {
  wheel1_ = 0;
}
inline float CmdWheel::_internal_wheel1() const {
  return wheel1_;
}
inline float CmdWheel::wheel1() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdWheel.wheel1)
  return _internal_wheel1();
}
inline void CmdWheel::_internal_set_wheel1(float value) {
  
  wheel1_ = value;
}
inline void CmdWheel::set_wheel1(float value) {
  _internal_set_wheel1(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdWheel.wheel1)
}

// float wheel2 = 2;
inline void CmdWheel::clear_wheel2() {
  wheel2_ = 0;
}
inline float CmdWheel::_internal_wheel2() const {
  return wheel2_;
}
inline float CmdWheel::wheel2() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdWheel.wheel2)
  return _internal_wheel2();
}
inline void CmdWheel::_internal_set_wheel2(float value) {
  
  wheel2_ = value;
}
inline void CmdWheel::set_wheel2(float value) {
  _internal_set_wheel2(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdWheel.wheel2)
}

// float wheel3 = 3;
inline void CmdWheel::clear_wheel3() {
  wheel3_ = 0;
}
inline float CmdWheel::_internal_wheel3() const {
  return wheel3_;
}
inline float CmdWheel::wheel3() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdWheel.wheel3)
  return _internal_wheel3();
}
inline void CmdWheel::_internal_set_wheel3(float value) {
  
  wheel3_ = value;
}
inline void CmdWheel::set_wheel3(float value) {
  _internal_set_wheel3(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdWheel.wheel3)
}

// float wheel4 = 4;
inline void CmdWheel::clear_wheel4() {
  wheel4_ = 0;
}
inline float CmdWheel::_internal_wheel4() const {
  return wheel4_;
}
inline float CmdWheel::wheel4() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdWheel.wheel4)
  return _internal_wheel4();
}
inline void CmdWheel::_internal_set_wheel4(float value) {
  
  wheel4_ = value;
}
inline void CmdWheel::set_wheel4(float value) {
  _internal_set_wheel4(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdWheel.wheel4)
}

// -------------------------------------------------------------------

// CmdVel

// float velocity_x = 1;
inline void CmdVel::clear_velocity_x() {
  velocity_x_ = 0;
}
inline float CmdVel::_internal_velocity_x() const {
  return velocity_x_;
}
inline float CmdVel::velocity_x() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdVel.velocity_x)
  return _internal_velocity_x();
}
inline void CmdVel::_internal_set_velocity_x(float value) {
  
  velocity_x_ = value;
}
inline void CmdVel::set_velocity_x(float value) {
  _internal_set_velocity_x(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdVel.velocity_x)
}

// float velocity_y = 2;
inline void CmdVel::clear_velocity_y() {
  velocity_y_ = 0;
}
inline float CmdVel::_internal_velocity_y() const {
  return velocity_y_;
}
inline float CmdVel::velocity_y() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdVel.velocity_y)
  return _internal_velocity_y();
}
inline void CmdVel::_internal_set_velocity_y(float value) {
  
  velocity_y_ = value;
}
inline void CmdVel::set_velocity_y(float value) {
  _internal_set_velocity_y(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdVel.velocity_y)
}

// bool use_imu = 3;
inline void CmdVel::clear_use_imu() {
  use_imu_ = false;
}
inline bool CmdVel::_internal_use_imu() const {
  return use_imu_;
}
inline bool CmdVel::use_imu() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdVel.use_imu)
  return _internal_use_imu();
}
inline void CmdVel::_internal_set_use_imu(bool value) {
  
  use_imu_ = value;
}
inline void CmdVel::set_use_imu(bool value) {
  _internal_set_use_imu(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdVel.use_imu)
}

// float velocity_r = 4;
inline void CmdVel::clear_velocity_r() {
  velocity_r_ = 0;
}
inline float CmdVel::_internal_velocity_r() const {
  return velocity_r_;
}
inline float CmdVel::velocity_r() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdVel.velocity_r)
  return _internal_velocity_r();
}
inline void CmdVel::_internal_set_velocity_r(float value) {
  
  velocity_r_ = value;
}
inline void CmdVel::set_velocity_r(float value) {
  _internal_set_velocity_r(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdVel.velocity_r)
}

// float imu_theta = 5;
inline void CmdVel::clear_imu_theta() {
  imu_theta_ = 0;
}
inline float CmdVel::_internal_imu_theta() const {
  return imu_theta_;
}
inline float CmdVel::imu_theta() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdVel.imu_theta)
  return _internal_imu_theta();
}
inline void CmdVel::_internal_set_imu_theta(float value) {
  
  imu_theta_ = value;
}
inline void CmdVel::set_imu_theta(float value) {
  _internal_set_imu_theta(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdVel.imu_theta)
}

// -------------------------------------------------------------------

// CmdPoseConfig

// float max_vx = 1;
inline void CmdPoseConfig::clear_max_vx() {
  max_vx_ = 0;
}
inline float CmdPoseConfig::_internal_max_vx() const {
  return max_vx_;
}
inline float CmdPoseConfig::max_vx() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_vx)
  return _internal_max_vx();
}
inline void CmdPoseConfig::_internal_set_max_vx(float value) {
  
  max_vx_ = value;
}
inline void CmdPoseConfig::set_max_vx(float value) {
  _internal_set_max_vx(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_vx)
}

// float max_vy = 2;
inline void CmdPoseConfig::clear_max_vy() {
  max_vy_ = 0;
}
inline float CmdPoseConfig::_internal_max_vy() const {
  return max_vy_;
}
inline float CmdPoseConfig::max_vy() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_vy)
  return _internal_max_vy();
}
inline void CmdPoseConfig::_internal_set_max_vy(float value) {
  
  max_vy_ = value;
}
inline void CmdPoseConfig::set_max_vy(float value) {
  _internal_set_max_vy(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_vy)
}

// float max_vw = 3;
inline void CmdPoseConfig::clear_max_vw() {
  max_vw_ = 0;
}
inline float CmdPoseConfig::_internal_max_vw() const {
  return max_vw_;
}
inline float CmdPoseConfig::max_vw() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_vw)
  return _internal_max_vw();
}
inline void CmdPoseConfig::_internal_set_max_vw(float value) {
  
  max_vw_ = value;
}
inline void CmdPoseConfig::set_max_vw(float value) {
  _internal_set_max_vw(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_vw)
}

// float max_ax = 4;
inline void CmdPoseConfig::clear_max_ax() {
  max_ax_ = 0;
}
inline float CmdPoseConfig::_internal_max_ax() const {
  return max_ax_;
}
inline float CmdPoseConfig::max_ax() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_ax)
  return _internal_max_ax();
}
inline void CmdPoseConfig::_internal_set_max_ax(float value) {
  
  max_ax_ = value;
}
inline void CmdPoseConfig::set_max_ax(float value) {
  _internal_set_max_ax(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_ax)
}

// float max_ay = 5;
inline void CmdPoseConfig::clear_max_ay() {
  max_ay_ = 0;
}
inline float CmdPoseConfig::_internal_max_ay() const {
  return max_ay_;
}
inline float CmdPoseConfig::max_ay() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_ay)
  return _internal_max_ay();
}
inline void CmdPoseConfig::_internal_set_max_ay(float value) {
  
  max_ay_ = value;
}
inline void CmdPoseConfig::set_max_ay(float value) {
  _internal_set_max_ay(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_ay)
}

// float max_aw = 6;
inline void CmdPoseConfig::clear_max_aw() {
  max_aw_ = 0;
}
inline float CmdPoseConfig::_internal_max_aw() const {
  return max_aw_;
}
inline float CmdPoseConfig::max_aw() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPoseConfig.max_aw)
  return _internal_max_aw();
}
inline void CmdPoseConfig::_internal_set_max_aw(float value) {
  
  max_aw_ = value;
}
inline void CmdPoseConfig::set_max_aw(float value) {
  _internal_set_max_aw(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPoseConfig.max_aw)
}

// -------------------------------------------------------------------

// CmdPose

// .ZSS.New.Pose start = 1;
inline bool CmdPose::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool CmdPose::has_start() const {
  return _internal_has_start();
}
inline void CmdPose::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::ZSS::New::Pose& CmdPose::_internal_start() const {
  const ::ZSS::New::Pose* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Pose*>(
      &::ZSS::New::_Pose_default_instance_);
}
inline const ::ZSS::New::Pose& CmdPose::start() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.start)
  return _internal_start();
}
inline void CmdPose::unsafe_arena_set_allocated_start(
    ::ZSS::New::Pose* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdPose.start)
}
inline ::ZSS::New::Pose* CmdPose::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Pose* CmdPose::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdPose.start)
  
  ::ZSS::New::Pose* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::ZSS::New::Pose* CmdPose::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Pose>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::ZSS::New::Pose* CmdPose::mutable_start() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdPose.start)
  return _internal_mutable_start();
}
inline void CmdPose::set_allocated_start(::ZSS::New::Pose* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdPose.start)
}

// .ZSS.New.Twist start_v = 2;
inline bool CmdPose::_internal_has_start_v() const {
  return this != internal_default_instance() && start_v_ != nullptr;
}
inline bool CmdPose::has_start_v() const {
  return _internal_has_start_v();
}
inline void CmdPose::clear_start_v() {
  if (GetArena() == nullptr && start_v_ != nullptr) {
    delete start_v_;
  }
  start_v_ = nullptr;
}
inline const ::ZSS::New::Twist& CmdPose::_internal_start_v() const {
  const ::ZSS::New::Twist* p = start_v_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Twist*>(
      &::ZSS::New::_Twist_default_instance_);
}
inline const ::ZSS::New::Twist& CmdPose::start_v() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.start_v)
  return _internal_start_v();
}
inline void CmdPose::unsafe_arena_set_allocated_start_v(
    ::ZSS::New::Twist* start_v) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_v_);
  }
  start_v_ = start_v;
  if (start_v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdPose.start_v)
}
inline ::ZSS::New::Twist* CmdPose::release_start_v() {
  auto temp = unsafe_arena_release_start_v();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Twist* CmdPose::unsafe_arena_release_start_v() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdPose.start_v)
  
  ::ZSS::New::Twist* temp = start_v_;
  start_v_ = nullptr;
  return temp;
}
inline ::ZSS::New::Twist* CmdPose::_internal_mutable_start_v() {
  
  if (start_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Twist>(GetArena());
    start_v_ = p;
  }
  return start_v_;
}
inline ::ZSS::New::Twist* CmdPose::mutable_start_v() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdPose.start_v)
  return _internal_mutable_start_v();
}
inline void CmdPose::set_allocated_start_v(::ZSS::New::Twist* start_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_v_;
  }
  if (start_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_v);
    if (message_arena != submessage_arena) {
      start_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_v, submessage_arena);
    }
    
  } else {
    
  }
  start_v_ = start_v;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdPose.start_v)
}

// .ZSS.New.Pose target = 3;
inline bool CmdPose::_internal_has_target() const {
  return this != internal_default_instance() && target_ != nullptr;
}
inline bool CmdPose::has_target() const {
  return _internal_has_target();
}
inline void CmdPose::clear_target() {
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
}
inline const ::ZSS::New::Pose& CmdPose::_internal_target() const {
  const ::ZSS::New::Pose* p = target_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Pose*>(
      &::ZSS::New::_Pose_default_instance_);
}
inline const ::ZSS::New::Pose& CmdPose::target() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.target)
  return _internal_target();
}
inline void CmdPose::unsafe_arena_set_allocated_target(
    ::ZSS::New::Pose* target) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_);
  }
  target_ = target;
  if (target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdPose.target)
}
inline ::ZSS::New::Pose* CmdPose::release_target() {
  auto temp = unsafe_arena_release_target();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Pose* CmdPose::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdPose.target)
  
  ::ZSS::New::Pose* temp = target_;
  target_ = nullptr;
  return temp;
}
inline ::ZSS::New::Pose* CmdPose::_internal_mutable_target() {
  
  if (target_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Pose>(GetArena());
    target_ = p;
  }
  return target_;
}
inline ::ZSS::New::Pose* CmdPose::mutable_target() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdPose.target)
  return _internal_mutable_target();
}
inline void CmdPose::set_allocated_target(::ZSS::New::Pose* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    
  } else {
    
  }
  target_ = target;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdPose.target)
}

// .ZSS.New.Twist target_v = 4;
inline bool CmdPose::_internal_has_target_v() const {
  return this != internal_default_instance() && target_v_ != nullptr;
}
inline bool CmdPose::has_target_v() const {
  return _internal_has_target_v();
}
inline void CmdPose::clear_target_v() {
  if (GetArena() == nullptr && target_v_ != nullptr) {
    delete target_v_;
  }
  target_v_ = nullptr;
}
inline const ::ZSS::New::Twist& CmdPose::_internal_target_v() const {
  const ::ZSS::New::Twist* p = target_v_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Twist*>(
      &::ZSS::New::_Twist_default_instance_);
}
inline const ::ZSS::New::Twist& CmdPose::target_v() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.target_v)
  return _internal_target_v();
}
inline void CmdPose::unsafe_arena_set_allocated_target_v(
    ::ZSS::New::Twist* target_v) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_v_);
  }
  target_v_ = target_v;
  if (target_v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdPose.target_v)
}
inline ::ZSS::New::Twist* CmdPose::release_target_v() {
  auto temp = unsafe_arena_release_target_v();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Twist* CmdPose::unsafe_arena_release_target_v() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdPose.target_v)
  
  ::ZSS::New::Twist* temp = target_v_;
  target_v_ = nullptr;
  return temp;
}
inline ::ZSS::New::Twist* CmdPose::_internal_mutable_target_v() {
  
  if (target_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Twist>(GetArena());
    target_v_ = p;
  }
  return target_v_;
}
inline ::ZSS::New::Twist* CmdPose::mutable_target_v() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdPose.target_v)
  return _internal_mutable_target_v();
}
inline void CmdPose::set_allocated_target_v(::ZSS::New::Twist* target_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete target_v_;
  }
  if (target_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(target_v);
    if (message_arena != submessage_arena) {
      target_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_v, submessage_arena);
    }
    
  } else {
    
  }
  target_v_ = target_v;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdPose.target_v)
}

// int32 rotation_sense = 5;
inline void CmdPose::clear_rotation_sense() {
  rotation_sense_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CmdPose::_internal_rotation_sense() const {
  return rotation_sense_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CmdPose::rotation_sense() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.rotation_sense)
  return _internal_rotation_sense();
}
inline void CmdPose::_internal_set_rotation_sense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rotation_sense_ = value;
}
inline void CmdPose::set_rotation_sense(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rotation_sense(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPose.rotation_sense)
}

// bool use_config = 6;
inline void CmdPose::clear_use_config() {
  use_config_ = false;
}
inline bool CmdPose::_internal_use_config() const {
  return use_config_;
}
inline bool CmdPose::use_config() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.use_config)
  return _internal_use_config();
}
inline void CmdPose::_internal_set_use_config(bool value) {
  
  use_config_ = value;
}
inline void CmdPose::set_use_config(bool value) {
  _internal_set_use_config(value);
  // @@protoc_insertion_point(field_set:ZSS.New.CmdPose.use_config)
}

// .ZSS.New.CmdPoseConfig config = 7;
inline bool CmdPose::_internal_has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline bool CmdPose::has_config() const {
  return _internal_has_config();
}
inline void CmdPose::clear_config() {
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::ZSS::New::CmdPoseConfig& CmdPose::_internal_config() const {
  const ::ZSS::New::CmdPoseConfig* p = config_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::CmdPoseConfig*>(
      &::ZSS::New::_CmdPoseConfig_default_instance_);
}
inline const ::ZSS::New::CmdPoseConfig& CmdPose::config() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdPose.config)
  return _internal_config();
}
inline void CmdPose::unsafe_arena_set_allocated_config(
    ::ZSS::New::CmdPoseConfig* config) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(config_);
  }
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdPose.config)
}
inline ::ZSS::New::CmdPoseConfig* CmdPose::release_config() {
  auto temp = unsafe_arena_release_config();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::CmdPoseConfig* CmdPose::unsafe_arena_release_config() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdPose.config)
  
  ::ZSS::New::CmdPoseConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::ZSS::New::CmdPoseConfig* CmdPose::_internal_mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::CmdPoseConfig>(GetArena());
    config_ = p;
  }
  return config_;
}
inline ::ZSS::New::CmdPoseConfig* CmdPose::mutable_config() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdPose.config)
  return _internal_mutable_config();
}
inline void CmdPose::set_allocated_config(::ZSS::New::CmdPoseConfig* config) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(config);
    if (message_arena != submessage_arena) {
      config = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdPose.config)
}

// -------------------------------------------------------------------

// CmdChase

// .ZSS.New.Pose start = 1;
inline bool CmdChase::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool CmdChase::has_start() const {
  return _internal_has_start();
}
inline void CmdChase::clear_start() {
  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
inline const ::ZSS::New::Pose& CmdChase::_internal_start() const {
  const ::ZSS::New::Pose* p = start_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Pose*>(
      &::ZSS::New::_Pose_default_instance_);
}
inline const ::ZSS::New::Pose& CmdChase::start() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdChase.start)
  return _internal_start();
}
inline void CmdChase::unsafe_arena_set_allocated_start(
    ::ZSS::New::Pose* start) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdChase.start)
}
inline ::ZSS::New::Pose* CmdChase::release_start() {
  auto temp = unsafe_arena_release_start();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Pose* CmdChase::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdChase.start)
  
  ::ZSS::New::Pose* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::ZSS::New::Pose* CmdChase::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Pose>(GetArena());
    start_ = p;
  }
  return start_;
}
inline ::ZSS::New::Pose* CmdChase::mutable_start() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdChase.start)
  return _internal_mutable_start();
}
inline void CmdChase::set_allocated_start(::ZSS::New::Pose* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdChase.start)
}

// .ZSS.New.Twist start_v = 2;
inline bool CmdChase::_internal_has_start_v() const {
  return this != internal_default_instance() && start_v_ != nullptr;
}
inline bool CmdChase::has_start_v() const {
  return _internal_has_start_v();
}
inline void CmdChase::clear_start_v() {
  if (GetArena() == nullptr && start_v_ != nullptr) {
    delete start_v_;
  }
  start_v_ = nullptr;
}
inline const ::ZSS::New::Twist& CmdChase::_internal_start_v() const {
  const ::ZSS::New::Twist* p = start_v_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Twist*>(
      &::ZSS::New::_Twist_default_instance_);
}
inline const ::ZSS::New::Twist& CmdChase::start_v() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdChase.start_v)
  return _internal_start_v();
}
inline void CmdChase::unsafe_arena_set_allocated_start_v(
    ::ZSS::New::Twist* start_v) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_v_);
  }
  start_v_ = start_v;
  if (start_v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdChase.start_v)
}
inline ::ZSS::New::Twist* CmdChase::release_start_v() {
  auto temp = unsafe_arena_release_start_v();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Twist* CmdChase::unsafe_arena_release_start_v() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdChase.start_v)
  
  ::ZSS::New::Twist* temp = start_v_;
  start_v_ = nullptr;
  return temp;
}
inline ::ZSS::New::Twist* CmdChase::_internal_mutable_start_v() {
  
  if (start_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Twist>(GetArena());
    start_v_ = p;
  }
  return start_v_;
}
inline ::ZSS::New::Twist* CmdChase::mutable_start_v() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdChase.start_v)
  return _internal_mutable_start_v();
}
inline void CmdChase::set_allocated_start_v(::ZSS::New::Twist* start_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete start_v_;
  }
  if (start_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(start_v);
    if (message_arena != submessage_arena) {
      start_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start_v, submessage_arena);
    }
    
  } else {
    
  }
  start_v_ = start_v;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdChase.start_v)
}

// .ZSS.New.Pose ball = 3;
inline bool CmdChase::_internal_has_ball() const {
  return this != internal_default_instance() && ball_ != nullptr;
}
inline bool CmdChase::has_ball() const {
  return _internal_has_ball();
}
inline void CmdChase::clear_ball() {
  if (GetArena() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
}
inline const ::ZSS::New::Pose& CmdChase::_internal_ball() const {
  const ::ZSS::New::Pose* p = ball_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Pose*>(
      &::ZSS::New::_Pose_default_instance_);
}
inline const ::ZSS::New::Pose& CmdChase::ball() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdChase.ball)
  return _internal_ball();
}
inline void CmdChase::unsafe_arena_set_allocated_ball(
    ::ZSS::New::Pose* ball) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_);
  }
  ball_ = ball;
  if (ball) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdChase.ball)
}
inline ::ZSS::New::Pose* CmdChase::release_ball() {
  auto temp = unsafe_arena_release_ball();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Pose* CmdChase::unsafe_arena_release_ball() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdChase.ball)
  
  ::ZSS::New::Pose* temp = ball_;
  ball_ = nullptr;
  return temp;
}
inline ::ZSS::New::Pose* CmdChase::_internal_mutable_ball() {
  
  if (ball_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Pose>(GetArena());
    ball_ = p;
  }
  return ball_;
}
inline ::ZSS::New::Pose* CmdChase::mutable_ball() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdChase.ball)
  return _internal_mutable_ball();
}
inline void CmdChase::set_allocated_ball(::ZSS::New::Pose* ball) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_;
  }
  if (ball) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball);
    if (message_arena != submessage_arena) {
      ball = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball, submessage_arena);
    }
    
  } else {
    
  }
  ball_ = ball;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdChase.ball)
}

// .ZSS.New.Twist ball_v = 4;
inline bool CmdChase::_internal_has_ball_v() const {
  return this != internal_default_instance() && ball_v_ != nullptr;
}
inline bool CmdChase::has_ball_v() const {
  return _internal_has_ball_v();
}
inline void CmdChase::clear_ball_v() {
  if (GetArena() == nullptr && ball_v_ != nullptr) {
    delete ball_v_;
  }
  ball_v_ = nullptr;
}
inline const ::ZSS::New::Twist& CmdChase::_internal_ball_v() const {
  const ::ZSS::New::Twist* p = ball_v_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ZSS::New::Twist*>(
      &::ZSS::New::_Twist_default_instance_);
}
inline const ::ZSS::New::Twist& CmdChase::ball_v() const {
  // @@protoc_insertion_point(field_get:ZSS.New.CmdChase.ball_v)
  return _internal_ball_v();
}
inline void CmdChase::unsafe_arena_set_allocated_ball_v(
    ::ZSS::New::Twist* ball_v) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ball_v_);
  }
  ball_v_ = ball_v;
  if (ball_v) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ZSS.New.CmdChase.ball_v)
}
inline ::ZSS::New::Twist* CmdChase::release_ball_v() {
  auto temp = unsafe_arena_release_ball_v();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ZSS::New::Twist* CmdChase::unsafe_arena_release_ball_v() {
  // @@protoc_insertion_point(field_release:ZSS.New.CmdChase.ball_v)
  
  ::ZSS::New::Twist* temp = ball_v_;
  ball_v_ = nullptr;
  return temp;
}
inline ::ZSS::New::Twist* CmdChase::_internal_mutable_ball_v() {
  
  if (ball_v_ == nullptr) {
    auto* p = CreateMaybeMessage<::ZSS::New::Twist>(GetArena());
    ball_v_ = p;
  }
  return ball_v_;
}
inline ::ZSS::New::Twist* CmdChase::mutable_ball_v() {
  // @@protoc_insertion_point(field_mutable:ZSS.New.CmdChase.ball_v)
  return _internal_mutable_ball_v();
}
inline void CmdChase::set_allocated_ball_v(::ZSS::New::Twist* ball_v) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ball_v_;
  }
  if (ball_v) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ball_v);
    if (message_arena != submessage_arena) {
      ball_v = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ball_v, submessage_arena);
    }
    
  } else {
    
  }
  ball_v_ = ball_v;
  // @@protoc_insertion_point(field_set_allocated:ZSS.New.CmdChase.ball_v)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace New
}  // namespace ZSS

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_zss_5fcmd_5ftype_2eproto
