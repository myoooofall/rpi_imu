// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd_type.proto

#include "zss_cmd_type.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Twist_zss_5fcmd_5ftype_2eproto;
namespace ZSS {
namespace New {
class PoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose> _instance;
} _Pose_default_instance_;
class TwistDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Twist> _instance;
} _Twist_default_instance_;
class OdomDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Odom> _instance;
} _Odom_default_instance_;
class CmdWheelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdWheel> _instance;
} _CmdWheel_default_instance_;
class CmdVelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdVel> _instance;
} _CmdVel_default_instance_;
class CmdPoseConfigDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdPoseConfig> _instance;
} _CmdPoseConfig_default_instance_;
class CmdPoseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdPose> _instance;
} _CmdPose_default_instance_;
class CmdChaseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CmdChase> _instance;
} _CmdChase_default_instance_;
}  // namespace New
}  // namespace ZSS
static void InitDefaultsscc_info_CmdChase_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_CmdChase_default_instance_;
    new (ptr) ::ZSS::New::CmdChase();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::CmdChase::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CmdChase_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CmdChase_zss_5fcmd_5ftype_2eproto}, {
      &scc_info_Pose_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_Twist_zss_5fcmd_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_CmdPose_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_CmdPose_default_instance_;
    new (ptr) ::ZSS::New::CmdPose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::CmdPose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CmdPose_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_CmdPose_zss_5fcmd_5ftype_2eproto}, {
      &scc_info_Pose_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_Twist_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_CmdPoseConfig_default_instance_;
    new (ptr) ::ZSS::New::CmdPoseConfig();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::CmdPoseConfig::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto}, {}};

static void InitDefaultsscc_info_CmdVel_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_CmdVel_default_instance_;
    new (ptr) ::ZSS::New::CmdVel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::CmdVel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdVel_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdVel_zss_5fcmd_5ftype_2eproto}, {}};

static void InitDefaultsscc_info_CmdWheel_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_CmdWheel_default_instance_;
    new (ptr) ::ZSS::New::CmdWheel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::CmdWheel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdWheel_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CmdWheel_zss_5fcmd_5ftype_2eproto}, {}};

static void InitDefaultsscc_info_Odom_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Odom_default_instance_;
    new (ptr) ::ZSS::New::Odom();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Odom::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Odom_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Odom_zss_5fcmd_5ftype_2eproto}, {
      &scc_info_Pose_zss_5fcmd_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_Pose_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Pose_default_instance_;
    new (ptr) ::ZSS::New::Pose();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Pose::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Pose_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Pose_zss_5fcmd_5ftype_2eproto}, {}};

static void InitDefaultsscc_info_Twist_zss_5fcmd_5ftype_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Twist_default_instance_;
    new (ptr) ::ZSS::New::Twist();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Twist::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Twist_zss_5fcmd_5ftype_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Twist_zss_5fcmd_5ftype_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5fcmd_5ftype_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_zss_5fcmd_5ftype_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5fcmd_5ftype_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5fcmd_5ftype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Pose, x_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Pose, y_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Pose, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Twist, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Twist, x_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Twist, y_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Twist, w_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Odom, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Odom, poses_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdWheel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdWheel, wheel1_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdWheel, wheel2_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdWheel, wheel3_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdWheel, wheel4_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, velocity_x_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, velocity_y_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, use_imu_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, velocity_r_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdVel, imu_theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_vx_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_vy_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_vw_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_ax_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_ay_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPoseConfig, max_aw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, start_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, start_v_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, target_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, target_v_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, rotation_sense_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, use_config_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdPose, config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdChase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdChase, start_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdChase, start_v_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdChase, ball_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::CmdChase, ball_v_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ZSS::New::Pose)},
  { 8, -1, sizeof(::ZSS::New::Twist)},
  { 16, -1, sizeof(::ZSS::New::Odom)},
  { 22, -1, sizeof(::ZSS::New::CmdWheel)},
  { 31, -1, sizeof(::ZSS::New::CmdVel)},
  { 41, -1, sizeof(::ZSS::New::CmdPoseConfig)},
  { 52, -1, sizeof(::ZSS::New::CmdPose)},
  { 64, -1, sizeof(::ZSS::New::CmdChase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Pose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Twist_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Odom_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_CmdWheel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_CmdVel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_CmdPoseConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_CmdPose_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_CmdChase_default_instance_),
};

const char descriptor_table_protodef_zss_5fcmd_5ftype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022zss_cmd_type.proto\022\007ZSS.New\"\'\n\004Pose\022\t\n"
  "\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001w\030\003 \001(\002\"(\n\005Twist\022"
  "\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001w\030\003 \001(\002\"$\n\004Odom"
  "\022\034\n\005poses\030\001 \003(\0132\r.ZSS.New.Pose\"J\n\010CmdWhe"
  "el\022\016\n\006wheel1\030\001 \001(\002\022\016\n\006wheel2\030\002 \001(\002\022\016\n\006wh"
  "eel3\030\003 \001(\002\022\016\n\006wheel4\030\004 \001(\002\"h\n\006CmdVel\022\022\n\n"
  "velocity_x\030\001 \001(\002\022\022\n\nvelocity_y\030\002 \001(\002\022\017\n\007"
  "use_imu\030\003 \001(\010\022\022\n\nvelocity_r\030\004 \001(\002\022\021\n\timu"
  "_theta\030\005 \001(\002\"o\n\rCmdPoseConfig\022\016\n\006max_vx\030"
  "\001 \001(\002\022\016\n\006max_vy\030\002 \001(\002\022\016\n\006max_vw\030\003 \001(\002\022\016\n"
  "\006max_ax\030\004 \001(\002\022\016\n\006max_ay\030\005 \001(\002\022\016\n\006max_aw\030"
  "\006 \001(\002\"\335\001\n\007CmdPose\022\034\n\005start\030\001 \001(\0132\r.ZSS.N"
  "ew.Pose\022\037\n\007start_v\030\002 \001(\0132\016.ZSS.New.Twist"
  "\022\035\n\006target\030\003 \001(\0132\r.ZSS.New.Pose\022 \n\010targe"
  "t_v\030\004 \001(\0132\016.ZSS.New.Twist\022\026\n\016rotation_se"
  "nse\030\005 \001(\005\022\022\n\nuse_config\030\006 \001(\010\022&\n\006config\030"
  "\007 \001(\0132\026.ZSS.New.CmdPoseConfig\"\206\001\n\010CmdCha"
  "se\022\034\n\005start\030\001 \001(\0132\r.ZSS.New.Pose\022\037\n\007star"
  "t_v\030\002 \001(\0132\016.ZSS.New.Twist\022\033\n\004ball\030\003 \001(\0132"
  "\r.ZSS.New.Pose\022\036\n\006ball_v\030\004 \001(\0132\016.ZSS.New"
  ".Twistb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5fcmd_5ftype_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5fcmd_5ftype_2eproto_sccs[8] = {
  &scc_info_CmdChase_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_CmdPose_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_CmdVel_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_CmdWheel_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_Odom_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_Pose_zss_5fcmd_5ftype_2eproto.base,
  &scc_info_Twist_zss_5fcmd_5ftype_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5fcmd_5ftype_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fcmd_5ftype_2eproto = {
  false, false, descriptor_table_protodef_zss_5fcmd_5ftype_2eproto, "zss_cmd_type.proto", 814,
  &descriptor_table_zss_5fcmd_5ftype_2eproto_once, descriptor_table_zss_5fcmd_5ftype_2eproto_sccs, descriptor_table_zss_5fcmd_5ftype_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_zss_5fcmd_5ftype_2eproto::offsets,
  file_level_metadata_zss_5fcmd_5ftype_2eproto, 8, file_level_enum_descriptors_zss_5fcmd_5ftype_2eproto, file_level_service_descriptors_zss_5fcmd_5ftype_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5fcmd_5ftype_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5fcmd_5ftype_2eproto)), true);
namespace ZSS {
namespace New {

// ===================================================================

void Pose::InitAsDefaultInstance() {
}
class Pose::_Internal {
 public:
};

Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Pose)
}

void Pose::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:ZSS.New.Pose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Pose::ArenaDtor(void* object) {
  Pose* _this = reinterpret_cast< Pose* >(object);
  (void)_this;
}
void Pose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose& Pose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Pose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Pose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Pose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Pose)
    MergeFrom(*source);
  }
}

void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Pose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, w_)
      + sizeof(Pose::w_)
      - PROTOBUF_FIELD_OFFSET(Pose, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Twist::InitAsDefaultInstance() {
}
class Twist::_Internal {
 public:
};

Twist::Twist(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Twist)
}
Twist::Twist(const Twist& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Twist)
}

void Twist::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Twist::~Twist() {
  // @@protoc_insertion_point(destructor:ZSS.New.Twist)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Twist::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Twist::ArenaDtor(void* object) {
  Twist* _this = reinterpret_cast< Twist* >(object);
  (void)_this;
}
void Twist::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Twist::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Twist& Twist::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Twist_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void Twist::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Twist::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float w = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          w_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Twist::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Twist)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_w(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Twist)
  return target;
}

size_t Twist::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Twist)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float w = 3;
  if (!(this->w() <= 0 && this->w() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Twist::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  const Twist* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Twist>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Twist)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Twist)
    MergeFrom(*source);
  }
}

void Twist::MergeFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Twist)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.w() <= 0 && from.w() >= 0)) {
    _internal_set_w(from._internal_w());
  }
}

void Twist::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Twist::CopyFrom(const Twist& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Twist)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Twist::IsInitialized() const {
  return true;
}

void Twist::InternalSwap(Twist* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Twist, w_)
      + sizeof(Twist::w_)
      - PROTOBUF_FIELD_OFFSET(Twist, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Twist::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Odom::InitAsDefaultInstance() {
}
class Odom::_Internal {
 public:
};

Odom::Odom(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  poses_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Odom)
}
Odom::Odom(const Odom& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      poses_(from.poses_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Odom)
}

void Odom::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Odom_zss_5fcmd_5ftype_2eproto.base);
}

Odom::~Odom() {
  // @@protoc_insertion_point(destructor:ZSS.New.Odom)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Odom::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Odom::ArenaDtor(void* object) {
  Odom* _this = reinterpret_cast< Odom* >(object);
  (void)_this;
}
void Odom::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Odom::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Odom& Odom::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Odom_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void Odom::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Odom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  poses_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Odom::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.New.Pose poses = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_poses(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Odom::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Odom)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.New.Pose poses = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_poses_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_poses(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Odom)
  return target;
}

size_t Odom::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Odom)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.New.Pose poses = 1;
  total_size += 1UL * this->_internal_poses_size();
  for (const auto& msg : this->poses_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Odom::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Odom)
  GOOGLE_DCHECK_NE(&from, this);
  const Odom* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Odom>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Odom)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Odom)
    MergeFrom(*source);
  }
}

void Odom::MergeFrom(const Odom& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Odom)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  poses_.MergeFrom(from.poses_);
}

void Odom::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Odom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Odom::CopyFrom(const Odom& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Odom)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Odom::IsInitialized() const {
  return true;
}

void Odom::InternalSwap(Odom* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  poses_.InternalSwap(&other->poses_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Odom::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdWheel::InitAsDefaultInstance() {
}
class CmdWheel::_Internal {
 public:
};

CmdWheel::CmdWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.CmdWheel)
}
CmdWheel::CmdWheel(const CmdWheel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&wheel1_, &from.wheel1_,
    static_cast<size_t>(reinterpret_cast<char*>(&wheel4_) -
    reinterpret_cast<char*>(&wheel1_)) + sizeof(wheel4_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.CmdWheel)
}

void CmdWheel::SharedCtor() {
  ::memset(&wheel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel4_) -
      reinterpret_cast<char*>(&wheel1_)) + sizeof(wheel4_));
}

CmdWheel::~CmdWheel() {
  // @@protoc_insertion_point(destructor:ZSS.New.CmdWheel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdWheel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmdWheel::ArenaDtor(void* object) {
  CmdWheel* _this = reinterpret_cast< CmdWheel* >(object);
  (void)_this;
}
void CmdWheel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdWheel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdWheel& CmdWheel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdWheel_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void CmdWheel::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.CmdWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&wheel1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&wheel4_) -
      reinterpret_cast<char*>(&wheel1_)) + sizeof(wheel4_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdWheel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float wheel1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          wheel1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wheel2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          wheel2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wheel3 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          wheel3_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float wheel4 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          wheel4_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdWheel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.CmdWheel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float wheel1 = 1;
  if (!(this->wheel1() <= 0 && this->wheel1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_wheel1(), target);
  }

  // float wheel2 = 2;
  if (!(this->wheel2() <= 0 && this->wheel2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_wheel2(), target);
  }

  // float wheel3 = 3;
  if (!(this->wheel3() <= 0 && this->wheel3() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_wheel3(), target);
  }

  // float wheel4 = 4;
  if (!(this->wheel4() <= 0 && this->wheel4() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_wheel4(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.CmdWheel)
  return target;
}

size_t CmdWheel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.CmdWheel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float wheel1 = 1;
  if (!(this->wheel1() <= 0 && this->wheel1() >= 0)) {
    total_size += 1 + 4;
  }

  // float wheel2 = 2;
  if (!(this->wheel2() <= 0 && this->wheel2() >= 0)) {
    total_size += 1 + 4;
  }

  // float wheel3 = 3;
  if (!(this->wheel3() <= 0 && this->wheel3() >= 0)) {
    total_size += 1 + 4;
  }

  // float wheel4 = 4;
  if (!(this->wheel4() <= 0 && this->wheel4() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdWheel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.CmdWheel)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdWheel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdWheel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.CmdWheel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.CmdWheel)
    MergeFrom(*source);
  }
}

void CmdWheel::MergeFrom(const CmdWheel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.CmdWheel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.wheel1() <= 0 && from.wheel1() >= 0)) {
    _internal_set_wheel1(from._internal_wheel1());
  }
  if (!(from.wheel2() <= 0 && from.wheel2() >= 0)) {
    _internal_set_wheel2(from._internal_wheel2());
  }
  if (!(from.wheel3() <= 0 && from.wheel3() >= 0)) {
    _internal_set_wheel3(from._internal_wheel3());
  }
  if (!(from.wheel4() <= 0 && from.wheel4() >= 0)) {
    _internal_set_wheel4(from._internal_wheel4());
  }
}

void CmdWheel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.CmdWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdWheel::CopyFrom(const CmdWheel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.CmdWheel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdWheel::IsInitialized() const {
  return true;
}

void CmdWheel::InternalSwap(CmdWheel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdWheel, wheel4_)
      + sizeof(CmdWheel::wheel4_)
      - PROTOBUF_FIELD_OFFSET(CmdWheel, wheel1_)>(
          reinterpret_cast<char*>(&wheel1_),
          reinterpret_cast<char*>(&other->wheel1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdWheel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdVel::InitAsDefaultInstance() {
}
class CmdVel::_Internal {
 public:
};

CmdVel::CmdVel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.CmdVel)
}
CmdVel::CmdVel(const CmdVel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&velocity_x_, &from.velocity_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&imu_theta_) -
    reinterpret_cast<char*>(&velocity_x_)) + sizeof(imu_theta_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.CmdVel)
}

void CmdVel::SharedCtor() {
  ::memset(&velocity_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_theta_) -
      reinterpret_cast<char*>(&velocity_x_)) + sizeof(imu_theta_));
}

CmdVel::~CmdVel() {
  // @@protoc_insertion_point(destructor:ZSS.New.CmdVel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdVel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmdVel::ArenaDtor(void* object) {
  CmdVel* _this = reinterpret_cast< CmdVel* >(object);
  (void)_this;
}
void CmdVel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdVel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdVel& CmdVel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdVel_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void CmdVel::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.CmdVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&velocity_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&imu_theta_) -
      reinterpret_cast<char*>(&velocity_x_)) + sizeof(imu_theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdVel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float velocity_x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          velocity_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float velocity_y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          velocity_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool use_imu = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          use_imu_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float velocity_r = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          velocity_r_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float imu_theta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          imu_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdVel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.CmdVel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float velocity_x = 1;
  if (!(this->velocity_x() <= 0 && this->velocity_x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_velocity_x(), target);
  }

  // float velocity_y = 2;
  if (!(this->velocity_y() <= 0 && this->velocity_y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_velocity_y(), target);
  }

  // bool use_imu = 3;
  if (this->use_imu() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_use_imu(), target);
  }

  // float velocity_r = 4;
  if (!(this->velocity_r() <= 0 && this->velocity_r() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_velocity_r(), target);
  }

  // float imu_theta = 5;
  if (!(this->imu_theta() <= 0 && this->imu_theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_imu_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.CmdVel)
  return target;
}

size_t CmdVel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.CmdVel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float velocity_x = 1;
  if (!(this->velocity_x() <= 0 && this->velocity_x() >= 0)) {
    total_size += 1 + 4;
  }

  // float velocity_y = 2;
  if (!(this->velocity_y() <= 0 && this->velocity_y() >= 0)) {
    total_size += 1 + 4;
  }

  // bool use_imu = 3;
  if (this->use_imu() != 0) {
    total_size += 1 + 1;
  }

  // float velocity_r = 4;
  if (!(this->velocity_r() <= 0 && this->velocity_r() >= 0)) {
    total_size += 1 + 4;
  }

  // float imu_theta = 5;
  if (!(this->imu_theta() <= 0 && this->imu_theta() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdVel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.CmdVel)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdVel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdVel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.CmdVel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.CmdVel)
    MergeFrom(*source);
  }
}

void CmdVel::MergeFrom(const CmdVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.CmdVel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.velocity_x() <= 0 && from.velocity_x() >= 0)) {
    _internal_set_velocity_x(from._internal_velocity_x());
  }
  if (!(from.velocity_y() <= 0 && from.velocity_y() >= 0)) {
    _internal_set_velocity_y(from._internal_velocity_y());
  }
  if (from.use_imu() != 0) {
    _internal_set_use_imu(from._internal_use_imu());
  }
  if (!(from.velocity_r() <= 0 && from.velocity_r() >= 0)) {
    _internal_set_velocity_r(from._internal_velocity_r());
  }
  if (!(from.imu_theta() <= 0 && from.imu_theta() >= 0)) {
    _internal_set_imu_theta(from._internal_imu_theta());
  }
}

void CmdVel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.CmdVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdVel::CopyFrom(const CmdVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.CmdVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdVel::IsInitialized() const {
  return true;
}

void CmdVel::InternalSwap(CmdVel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdVel, imu_theta_)
      + sizeof(CmdVel::imu_theta_)
      - PROTOBUF_FIELD_OFFSET(CmdVel, velocity_x_)>(
          reinterpret_cast<char*>(&velocity_x_),
          reinterpret_cast<char*>(&other->velocity_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdVel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdPoseConfig::InitAsDefaultInstance() {
}
class CmdPoseConfig::_Internal {
 public:
};

CmdPoseConfig::CmdPoseConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.CmdPoseConfig)
}
CmdPoseConfig::CmdPoseConfig(const CmdPoseConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_vx_, &from.max_vx_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_aw_) -
    reinterpret_cast<char*>(&max_vx_)) + sizeof(max_aw_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.CmdPoseConfig)
}

void CmdPoseConfig::SharedCtor() {
  ::memset(&max_vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_aw_) -
      reinterpret_cast<char*>(&max_vx_)) + sizeof(max_aw_));
}

CmdPoseConfig::~CmdPoseConfig() {
  // @@protoc_insertion_point(destructor:ZSS.New.CmdPoseConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdPoseConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CmdPoseConfig::ArenaDtor(void* object) {
  CmdPoseConfig* _this = reinterpret_cast< CmdPoseConfig* >(object);
  (void)_this;
}
void CmdPoseConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdPoseConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdPoseConfig& CmdPoseConfig::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdPoseConfig_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void CmdPoseConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.CmdPoseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&max_vx_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_aw_) -
      reinterpret_cast<char*>(&max_vx_)) + sizeof(max_aw_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdPoseConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float max_vx = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          max_vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_vy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          max_vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_vw = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          max_vw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_ax = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          max_ax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_ay = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          max_ay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float max_aw = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          max_aw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdPoseConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.CmdPoseConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float max_vx = 1;
  if (!(this->max_vx() <= 0 && this->max_vx() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_max_vx(), target);
  }

  // float max_vy = 2;
  if (!(this->max_vy() <= 0 && this->max_vy() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_max_vy(), target);
  }

  // float max_vw = 3;
  if (!(this->max_vw() <= 0 && this->max_vw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_max_vw(), target);
  }

  // float max_ax = 4;
  if (!(this->max_ax() <= 0 && this->max_ax() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_max_ax(), target);
  }

  // float max_ay = 5;
  if (!(this->max_ay() <= 0 && this->max_ay() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_max_ay(), target);
  }

  // float max_aw = 6;
  if (!(this->max_aw() <= 0 && this->max_aw() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_max_aw(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.CmdPoseConfig)
  return target;
}

size_t CmdPoseConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.CmdPoseConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float max_vx = 1;
  if (!(this->max_vx() <= 0 && this->max_vx() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_vy = 2;
  if (!(this->max_vy() <= 0 && this->max_vy() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_vw = 3;
  if (!(this->max_vw() <= 0 && this->max_vw() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_ax = 4;
  if (!(this->max_ax() <= 0 && this->max_ax() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_ay = 5;
  if (!(this->max_ay() <= 0 && this->max_ay() >= 0)) {
    total_size += 1 + 4;
  }

  // float max_aw = 6;
  if (!(this->max_aw() <= 0 && this->max_aw() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdPoseConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.CmdPoseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdPoseConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdPoseConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.CmdPoseConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.CmdPoseConfig)
    MergeFrom(*source);
  }
}

void CmdPoseConfig::MergeFrom(const CmdPoseConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.CmdPoseConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.max_vx() <= 0 && from.max_vx() >= 0)) {
    _internal_set_max_vx(from._internal_max_vx());
  }
  if (!(from.max_vy() <= 0 && from.max_vy() >= 0)) {
    _internal_set_max_vy(from._internal_max_vy());
  }
  if (!(from.max_vw() <= 0 && from.max_vw() >= 0)) {
    _internal_set_max_vw(from._internal_max_vw());
  }
  if (!(from.max_ax() <= 0 && from.max_ax() >= 0)) {
    _internal_set_max_ax(from._internal_max_ax());
  }
  if (!(from.max_ay() <= 0 && from.max_ay() >= 0)) {
    _internal_set_max_ay(from._internal_max_ay());
  }
  if (!(from.max_aw() <= 0 && from.max_aw() >= 0)) {
    _internal_set_max_aw(from._internal_max_aw());
  }
}

void CmdPoseConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.CmdPoseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPoseConfig::CopyFrom(const CmdPoseConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.CmdPoseConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPoseConfig::IsInitialized() const {
  return true;
}

void CmdPoseConfig::InternalSwap(CmdPoseConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdPoseConfig, max_aw_)
      + sizeof(CmdPoseConfig::max_aw_)
      - PROTOBUF_FIELD_OFFSET(CmdPoseConfig, max_vx_)>(
          reinterpret_cast<char*>(&max_vx_),
          reinterpret_cast<char*>(&other->max_vx_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPoseConfig::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdPose::InitAsDefaultInstance() {
  ::ZSS::New::_CmdPose_default_instance_._instance.get_mutable()->start_ = const_cast< ::ZSS::New::Pose*>(
      ::ZSS::New::Pose::internal_default_instance());
  ::ZSS::New::_CmdPose_default_instance_._instance.get_mutable()->start_v_ = const_cast< ::ZSS::New::Twist*>(
      ::ZSS::New::Twist::internal_default_instance());
  ::ZSS::New::_CmdPose_default_instance_._instance.get_mutable()->target_ = const_cast< ::ZSS::New::Pose*>(
      ::ZSS::New::Pose::internal_default_instance());
  ::ZSS::New::_CmdPose_default_instance_._instance.get_mutable()->target_v_ = const_cast< ::ZSS::New::Twist*>(
      ::ZSS::New::Twist::internal_default_instance());
  ::ZSS::New::_CmdPose_default_instance_._instance.get_mutable()->config_ = const_cast< ::ZSS::New::CmdPoseConfig*>(
      ::ZSS::New::CmdPoseConfig::internal_default_instance());
}
class CmdPose::_Internal {
 public:
  static const ::ZSS::New::Pose& start(const CmdPose* msg);
  static const ::ZSS::New::Twist& start_v(const CmdPose* msg);
  static const ::ZSS::New::Pose& target(const CmdPose* msg);
  static const ::ZSS::New::Twist& target_v(const CmdPose* msg);
  static const ::ZSS::New::CmdPoseConfig& config(const CmdPose* msg);
};

const ::ZSS::New::Pose&
CmdPose::_Internal::start(const CmdPose* msg) {
  return *msg->start_;
}
const ::ZSS::New::Twist&
CmdPose::_Internal::start_v(const CmdPose* msg) {
  return *msg->start_v_;
}
const ::ZSS::New::Pose&
CmdPose::_Internal::target(const CmdPose* msg) {
  return *msg->target_;
}
const ::ZSS::New::Twist&
CmdPose::_Internal::target_v(const CmdPose* msg) {
  return *msg->target_v_;
}
const ::ZSS::New::CmdPoseConfig&
CmdPose::_Internal::config(const CmdPose* msg) {
  return *msg->config_;
}
CmdPose::CmdPose(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.CmdPose)
}
CmdPose::CmdPose(const CmdPose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::ZSS::New::Pose(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_start_v()) {
    start_v_ = new ::ZSS::New::Twist(*from.start_v_);
  } else {
    start_v_ = nullptr;
  }
  if (from._internal_has_target()) {
    target_ = new ::ZSS::New::Pose(*from.target_);
  } else {
    target_ = nullptr;
  }
  if (from._internal_has_target_v()) {
    target_v_ = new ::ZSS::New::Twist(*from.target_v_);
  } else {
    target_v_ = nullptr;
  }
  if (from._internal_has_config()) {
    config_ = new ::ZSS::New::CmdPoseConfig(*from.config_);
  } else {
    config_ = nullptr;
  }
  ::memcpy(&rotation_sense_, &from.rotation_sense_,
    static_cast<size_t>(reinterpret_cast<char*>(&use_config_) -
    reinterpret_cast<char*>(&rotation_sense_)) + sizeof(use_config_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.CmdPose)
}

void CmdPose::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdPose_zss_5fcmd_5ftype_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_config_) -
      reinterpret_cast<char*>(&start_)) + sizeof(use_config_));
}

CmdPose::~CmdPose() {
  // @@protoc_insertion_point(destructor:ZSS.New.CmdPose)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdPose::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete start_v_;
  if (this != internal_default_instance()) delete target_;
  if (this != internal_default_instance()) delete target_v_;
  if (this != internal_default_instance()) delete config_;
}

void CmdPose::ArenaDtor(void* object) {
  CmdPose* _this = reinterpret_cast< CmdPose* >(object);
  (void)_this;
}
void CmdPose::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdPose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdPose& CmdPose::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdPose_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void CmdPose::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.CmdPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && start_v_ != nullptr) {
    delete start_v_;
  }
  start_v_ = nullptr;
  if (GetArena() == nullptr && target_ != nullptr) {
    delete target_;
  }
  target_ = nullptr;
  if (GetArena() == nullptr && target_v_ != nullptr) {
    delete target_v_;
  }
  target_v_ = nullptr;
  if (GetArena() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
  ::memset(&rotation_sense_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&use_config_) -
      reinterpret_cast<char*>(&rotation_sense_)) + sizeof(use_config_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdPose::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ZSS.New.Pose start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Twist start_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Pose target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Twist target_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_target_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 rotation_sense = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          rotation_sense_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool use_config = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          use_config_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.CmdPoseConfig config = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_config(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdPose::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.CmdPose)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.New.Pose start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .ZSS.New.Twist start_v = 2;
  if (this->has_start_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_v(this), target, stream);
  }

  // .ZSS.New.Pose target = 3;
  if (this->has_target()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::target(this), target, stream);
  }

  // .ZSS.New.Twist target_v = 4;
  if (this->has_target_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::target_v(this), target, stream);
  }

  // int32 rotation_sense = 5;
  if (this->rotation_sense() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_rotation_sense(), target);
  }

  // bool use_config = 6;
  if (this->use_config() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_use_config(), target);
  }

  // .ZSS.New.CmdPoseConfig config = 7;
  if (this->has_config()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::config(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.CmdPose)
  return target;
}

size_t CmdPose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.CmdPose)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ZSS.New.Pose start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .ZSS.New.Twist start_v = 2;
  if (this->has_start_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_v_);
  }

  // .ZSS.New.Pose target = 3;
  if (this->has_target()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_);
  }

  // .ZSS.New.Twist target_v = 4;
  if (this->has_target_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *target_v_);
  }

  // .ZSS.New.CmdPoseConfig config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *config_);
  }

  // int32 rotation_sense = 5;
  if (this->rotation_sense() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_rotation_sense());
  }

  // bool use_config = 6;
  if (this->use_config() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdPose::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.CmdPose)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdPose* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdPose>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.CmdPose)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.CmdPose)
    MergeFrom(*source);
  }
}

void CmdPose::MergeFrom(const CmdPose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.CmdPose)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->::ZSS::New::Pose::MergeFrom(from._internal_start());
  }
  if (from.has_start_v()) {
    _internal_mutable_start_v()->::ZSS::New::Twist::MergeFrom(from._internal_start_v());
  }
  if (from.has_target()) {
    _internal_mutable_target()->::ZSS::New::Pose::MergeFrom(from._internal_target());
  }
  if (from.has_target_v()) {
    _internal_mutable_target_v()->::ZSS::New::Twist::MergeFrom(from._internal_target_v());
  }
  if (from.has_config()) {
    _internal_mutable_config()->::ZSS::New::CmdPoseConfig::MergeFrom(from._internal_config());
  }
  if (from.rotation_sense() != 0) {
    _internal_set_rotation_sense(from._internal_rotation_sense());
  }
  if (from.use_config() != 0) {
    _internal_set_use_config(from._internal_use_config());
  }
}

void CmdPose::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.CmdPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdPose::CopyFrom(const CmdPose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.CmdPose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdPose::IsInitialized() const {
  return true;
}

void CmdPose::InternalSwap(CmdPose* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdPose, use_config_)
      + sizeof(CmdPose::use_config_)
      - PROTOBUF_FIELD_OFFSET(CmdPose, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdPose::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CmdChase::InitAsDefaultInstance() {
  ::ZSS::New::_CmdChase_default_instance_._instance.get_mutable()->start_ = const_cast< ::ZSS::New::Pose*>(
      ::ZSS::New::Pose::internal_default_instance());
  ::ZSS::New::_CmdChase_default_instance_._instance.get_mutable()->start_v_ = const_cast< ::ZSS::New::Twist*>(
      ::ZSS::New::Twist::internal_default_instance());
  ::ZSS::New::_CmdChase_default_instance_._instance.get_mutable()->ball_ = const_cast< ::ZSS::New::Pose*>(
      ::ZSS::New::Pose::internal_default_instance());
  ::ZSS::New::_CmdChase_default_instance_._instance.get_mutable()->ball_v_ = const_cast< ::ZSS::New::Twist*>(
      ::ZSS::New::Twist::internal_default_instance());
}
class CmdChase::_Internal {
 public:
  static const ::ZSS::New::Pose& start(const CmdChase* msg);
  static const ::ZSS::New::Twist& start_v(const CmdChase* msg);
  static const ::ZSS::New::Pose& ball(const CmdChase* msg);
  static const ::ZSS::New::Twist& ball_v(const CmdChase* msg);
};

const ::ZSS::New::Pose&
CmdChase::_Internal::start(const CmdChase* msg) {
  return *msg->start_;
}
const ::ZSS::New::Twist&
CmdChase::_Internal::start_v(const CmdChase* msg) {
  return *msg->start_v_;
}
const ::ZSS::New::Pose&
CmdChase::_Internal::ball(const CmdChase* msg) {
  return *msg->ball_;
}
const ::ZSS::New::Twist&
CmdChase::_Internal::ball_v(const CmdChase* msg) {
  return *msg->ball_v_;
}
CmdChase::CmdChase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.CmdChase)
}
CmdChase::CmdChase(const CmdChase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::ZSS::New::Pose(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_start_v()) {
    start_v_ = new ::ZSS::New::Twist(*from.start_v_);
  } else {
    start_v_ = nullptr;
  }
  if (from._internal_has_ball()) {
    ball_ = new ::ZSS::New::Pose(*from.ball_);
  } else {
    ball_ = nullptr;
  }
  if (from._internal_has_ball_v()) {
    ball_v_ = new ::ZSS::New::Twist(*from.ball_v_);
  } else {
    ball_v_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:ZSS.New.CmdChase)
}

void CmdChase::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CmdChase_zss_5fcmd_5ftype_2eproto.base);
  ::memset(&start_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ball_v_) -
      reinterpret_cast<char*>(&start_)) + sizeof(ball_v_));
}

CmdChase::~CmdChase() {
  // @@protoc_insertion_point(destructor:ZSS.New.CmdChase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CmdChase::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete start_v_;
  if (this != internal_default_instance()) delete ball_;
  if (this != internal_default_instance()) delete ball_v_;
}

void CmdChase::ArenaDtor(void* object) {
  CmdChase* _this = reinterpret_cast< CmdChase* >(object);
  (void)_this;
}
void CmdChase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CmdChase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CmdChase& CmdChase::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CmdChase_zss_5fcmd_5ftype_2eproto.base);
  return *internal_default_instance();
}


void CmdChase::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.CmdChase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArena() == nullptr && start_v_ != nullptr) {
    delete start_v_;
  }
  start_v_ = nullptr;
  if (GetArena() == nullptr && ball_ != nullptr) {
    delete ball_;
  }
  ball_ = nullptr;
  if (GetArena() == nullptr && ball_v_ != nullptr) {
    delete ball_v_;
  }
  ball_v_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CmdChase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ZSS.New.Pose start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Twist start_v = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Pose ball = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Twist ball_v = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ball_v(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CmdChase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.CmdChase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZSS.New.Pose start = 1;
  if (this->has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .ZSS.New.Twist start_v = 2;
  if (this->has_start_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::start_v(this), target, stream);
  }

  // .ZSS.New.Pose ball = 3;
  if (this->has_ball()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ball(this), target, stream);
  }

  // .ZSS.New.Twist ball_v = 4;
  if (this->has_ball_v()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ball_v(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.CmdChase)
  return target;
}

size_t CmdChase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.CmdChase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ZSS.New.Pose start = 1;
  if (this->has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .ZSS.New.Twist start_v = 2;
  if (this->has_start_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_v_);
  }

  // .ZSS.New.Pose ball = 3;
  if (this->has_ball()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_);
  }

  // .ZSS.New.Twist ball_v = 4;
  if (this->has_ball_v()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ball_v_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CmdChase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.CmdChase)
  GOOGLE_DCHECK_NE(&from, this);
  const CmdChase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CmdChase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.CmdChase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.CmdChase)
    MergeFrom(*source);
  }
}

void CmdChase::MergeFrom(const CmdChase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.CmdChase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_start()) {
    _internal_mutable_start()->::ZSS::New::Pose::MergeFrom(from._internal_start());
  }
  if (from.has_start_v()) {
    _internal_mutable_start_v()->::ZSS::New::Twist::MergeFrom(from._internal_start_v());
  }
  if (from.has_ball()) {
    _internal_mutable_ball()->::ZSS::New::Pose::MergeFrom(from._internal_ball());
  }
  if (from.has_ball_v()) {
    _internal_mutable_ball_v()->::ZSS::New::Twist::MergeFrom(from._internal_ball_v());
  }
}

void CmdChase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.CmdChase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CmdChase::CopyFrom(const CmdChase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.CmdChase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CmdChase::IsInitialized() const {
  return true;
}

void CmdChase::InternalSwap(CmdChase* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdChase, ball_v_)
      + sizeof(CmdChase::ball_v_)
      - PROTOBUF_FIELD_OFFSET(CmdChase, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CmdChase::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace New
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::New::Pose* Arena::CreateMaybeMessage< ::ZSS::New::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Twist* Arena::CreateMaybeMessage< ::ZSS::New::Twist >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Twist >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Odom* Arena::CreateMaybeMessage< ::ZSS::New::Odom >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Odom >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::CmdWheel* Arena::CreateMaybeMessage< ::ZSS::New::CmdWheel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::CmdWheel >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::CmdVel* Arena::CreateMaybeMessage< ::ZSS::New::CmdVel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::CmdVel >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::CmdPoseConfig* Arena::CreateMaybeMessage< ::ZSS::New::CmdPoseConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::CmdPoseConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::CmdPose* Arena::CreateMaybeMessage< ::ZSS::New::CmdPose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::CmdPose >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::CmdChase* Arena::CreateMaybeMessage< ::ZSS::New::CmdChase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::CmdChase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
