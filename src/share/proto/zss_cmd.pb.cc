// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zss_cmd.proto

#include "zss_cmd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CmdChase_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CmdPose_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdVel_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CmdWheel_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_5ftype_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Odom_zss_5fcmd_5ftype_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Robot_Command_zss_5fcmd_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_zss_5fcmd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robot_Status_zss_5fcmd_2eproto;
namespace ZSS {
namespace New {
class Robots_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robots_Status> _instance;
} _Robots_Status_default_instance_;
class Multicast_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Multicast_Status> _instance;
} _Multicast_Status_default_instance_;
class Robot_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot_Status> _instance;
} _Robot_Status_default_instance_;
class Robots_CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robots_Command> _instance;
} _Robots_Command_default_instance_;
class Robot_CommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Robot_Command> _instance;
} _Robot_Command_default_instance_;
}  // namespace New
}  // namespace ZSS
static void InitDefaultsscc_info_Multicast_Status_zss_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Multicast_Status_default_instance_;
    new (ptr) ::ZSS::New::Multicast_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Multicast_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Multicast_Status_zss_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Multicast_Status_zss_5fcmd_2eproto}, {}};

static void InitDefaultsscc_info_Robot_Command_zss_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Robot_Command_default_instance_;
    new (ptr) ::ZSS::New::Robot_Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Robot_Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_Robot_Command_zss_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_Robot_Command_zss_5fcmd_2eproto}, {
      &scc_info_CmdVel_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_CmdPose_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_CmdChase_zss_5fcmd_5ftype_2eproto.base,
      &scc_info_CmdWheel_zss_5fcmd_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_Robot_Status_zss_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Robot_Status_default_instance_;
    new (ptr) ::ZSS::New::Robot_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Robot_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robot_Status_zss_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Robot_Status_zss_5fcmd_2eproto}, {
      &scc_info_Odom_zss_5fcmd_5ftype_2eproto.base,}};

static void InitDefaultsscc_info_Robots_Command_zss_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Robots_Command_default_instance_;
    new (ptr) ::ZSS::New::Robots_Command();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Robots_Command::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robots_Command_zss_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Robots_Command_zss_5fcmd_2eproto}, {
      &scc_info_Robot_Command_zss_5fcmd_2eproto.base,}};

static void InitDefaultsscc_info_Robots_Status_zss_5fcmd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ZSS::New::_Robots_Status_default_instance_;
    new (ptr) ::ZSS::New::Robots_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ZSS::New::Robots_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Robots_Status_zss_5fcmd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Robots_Status_zss_5fcmd_2eproto}, {
      &scc_info_Robot_Status_zss_5fcmd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_zss_5fcmd_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_zss_5fcmd_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_zss_5fcmd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_zss_5fcmd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Status, robots_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, ip_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, uuid_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, team_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, robot_id_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, battery_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Multicast_Status, capacitance_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, robot_id_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, infrared_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, flat_kick_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, chip_kick_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, imu_theta_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, battery_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, capacitance_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, odom_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, wheel_encoder_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Status, team_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Command, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Command, command_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robots_Command, delay_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, robot_id_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, kick_mode_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, desire_power_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, kick_discharge_time_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, dribble_spin_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, need_report_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, cmd_type_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, cmd_vel_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, cmd_pose_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, cmd_chase_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, cmd_wheel_),
  PROTOBUF_FIELD_OFFSET(::ZSS::New::Robot_Command, comm_type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ZSS::New::Robots_Status)},
  { 6, -1, sizeof(::ZSS::New::Multicast_Status)},
  { 17, -1, sizeof(::ZSS::New::Robot_Status)},
  { 32, 39, sizeof(::ZSS::New::Robots_Command)},
  { 41, -1, sizeof(::ZSS::New::Robot_Command)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Robots_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Multicast_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Robot_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Robots_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ZSS::New::_Robot_Command_default_instance_),
};

const char descriptor_table_protodef_zss_5fcmd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rzss_cmd.proto\022\007ZSS.New\032\022zss_cmd_type.p"
  "roto\"=\n\rRobots_Status\022,\n\rrobots_status\030\001"
  " \003(\0132\025.ZSS.New.Robot_Status\"\201\001\n\020Multicas"
  "t_Status\022\n\n\002ip\030\001 \001(\t\022\014\n\004uuid\030\002 \001(\t\022\033\n\004te"
  "am\030\003 \001(\0162\r.ZSS.New.Team\022\020\n\010robot_id\030\004 \001("
  "\005\022\017\n\007battery\030\005 \001(\002\022\023\n\013capacitance\030\006 \001(\002\""
  "\342\001\n\014Robot_Status\022\020\n\010robot_id\030\001 \001(\005\022\020\n\010in"
  "frared\030\002 \001(\002\022\021\n\tflat_kick\030\003 \001(\002\022\021\n\tchip_"
  "kick\030\004 \001(\002\022\021\n\timu_theta\030\005 \001(\002\022\017\n\007battery"
  "\030\006 \001(\002\022\023\n\013capacitance\030\007 \001(\002\022\033\n\004odom\030\010 \001("
  "\0132\r.ZSS.New.Odom\022\025\n\rwheel_encoder\030\t \003(\002\022"
  "\033\n\004team\030\n \001(\0162\r.ZSS.New.Team\"W\n\016Robots_C"
  "ommand\022\'\n\007command\030\001 \003(\0132\026.ZSS.New.Robot_"
  "Command\022\022\n\005delay\030\002 \001(\005H\000\210\001\001B\010\n\006_delay\"\345\004"
  "\n\rRobot_Command\022\020\n\010robot_id\030\001 \001(\005\0222\n\tkic"
  "k_mode\030\002 \001(\0162\037.ZSS.New.Robot_Command.Kic"
  "kMode\022\024\n\014desire_power\030\003 \001(\002\022\033\n\023kick_disc"
  "harge_time\030\004 \001(\002\022\024\n\014dribble_spin\030\005 \001(\002\022\023"
  "\n\013need_report\030\006 \001(\010\0220\n\010cmd_type\030\007 \001(\0162\036."
  "ZSS.New.Robot_Command.CmdType\022 \n\007cmd_vel"
  "\030\010 \001(\0132\017.ZSS.New.CmdVel\022\"\n\010cmd_pose\030\t \001("
  "\0132\020.ZSS.New.CmdPose\022$\n\tcmd_chase\030\n \001(\0132\021"
  ".ZSS.New.CmdChase\022$\n\tcmd_wheel\030\013 \001(\0132\021.Z"
  "SS.New.CmdWheel\0222\n\tcomm_type\030\014 \001(\0162\037.ZSS"
  ".New.Robot_Command.CommType\"(\n\010KickMode\022"
  "\010\n\004NONE\020\000\022\010\n\004KICK\020\001\022\010\n\004CHIP\020\002\"L\n\007CmdType"
  "\022\010\n\004STOP\020\000\022\r\n\tCMD_WHEEL\020\001\022\013\n\007CMD_VEL\020\002\022\014"
  "\n\010CMD_POSE\020\003\022\r\n\tCMD_CHASE\020\004\"@\n\010CommType\022"
  "\013\n\007DEFAULT\020\000\022\n\n\006SERIAL\020\001\022\r\n\tUDP_24L01\020\002\022"
  "\014\n\010UDP_WIFI\020\003*)\n\004Team\022\013\n\007UNKNOWN\020\000\022\010\n\004BL"
  "UE\020\001\022\n\n\006YELLOW\020\002b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_zss_5fcmd_2eproto_deps[1] = {
  &::descriptor_table_zss_5fcmd_5ftype_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_zss_5fcmd_2eproto_sccs[5] = {
  &scc_info_Multicast_Status_zss_5fcmd_2eproto.base,
  &scc_info_Robot_Command_zss_5fcmd_2eproto.base,
  &scc_info_Robot_Status_zss_5fcmd_2eproto.base,
  &scc_info_Robots_Command_zss_5fcmd_2eproto.base,
  &scc_info_Robots_Status_zss_5fcmd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_zss_5fcmd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_zss_5fcmd_2eproto = {
  false, false, descriptor_table_protodef_zss_5fcmd_2eproto, "zss_cmd.proto", 1224,
  &descriptor_table_zss_5fcmd_2eproto_once, descriptor_table_zss_5fcmd_2eproto_sccs, descriptor_table_zss_5fcmd_2eproto_deps, 5, 1,
  schemas, file_default_instances, TableStruct_zss_5fcmd_2eproto::offsets,
  file_level_metadata_zss_5fcmd_2eproto, 5, file_level_enum_descriptors_zss_5fcmd_2eproto, file_level_service_descriptors_zss_5fcmd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_zss_5fcmd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_zss_5fcmd_2eproto)), true);
namespace ZSS {
namespace New {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_Command_KickMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fcmd_2eproto);
  return file_level_enum_descriptors_zss_5fcmd_2eproto[0];
}
bool Robot_Command_KickMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Robot_Command_KickMode Robot_Command::NONE;
constexpr Robot_Command_KickMode Robot_Command::KICK;
constexpr Robot_Command_KickMode Robot_Command::CHIP;
constexpr Robot_Command_KickMode Robot_Command::KickMode_MIN;
constexpr Robot_Command_KickMode Robot_Command::KickMode_MAX;
constexpr int Robot_Command::KickMode_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_Command_CmdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fcmd_2eproto);
  return file_level_enum_descriptors_zss_5fcmd_2eproto[1];
}
bool Robot_Command_CmdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Robot_Command_CmdType Robot_Command::STOP;
constexpr Robot_Command_CmdType Robot_Command::CMD_WHEEL;
constexpr Robot_Command_CmdType Robot_Command::CMD_VEL;
constexpr Robot_Command_CmdType Robot_Command::CMD_POSE;
constexpr Robot_Command_CmdType Robot_Command::CMD_CHASE;
constexpr Robot_Command_CmdType Robot_Command::CmdType_MIN;
constexpr Robot_Command_CmdType Robot_Command::CmdType_MAX;
constexpr int Robot_Command::CmdType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Robot_Command_CommType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fcmd_2eproto);
  return file_level_enum_descriptors_zss_5fcmd_2eproto[2];
}
bool Robot_Command_CommType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr Robot_Command_CommType Robot_Command::DEFAULT;
constexpr Robot_Command_CommType Robot_Command::SERIAL;
constexpr Robot_Command_CommType Robot_Command::UDP_24L01;
constexpr Robot_Command_CommType Robot_Command::UDP_WIFI;
constexpr Robot_Command_CommType Robot_Command::CommType_MIN;
constexpr Robot_Command_CommType Robot_Command::CommType_MAX;
constexpr int Robot_Command::CommType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Team_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_zss_5fcmd_2eproto);
  return file_level_enum_descriptors_zss_5fcmd_2eproto[3];
}
bool Team_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Robots_Status::InitAsDefaultInstance() {
}
class Robots_Status::_Internal {
 public:
};

Robots_Status::Robots_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  robots_status_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Robots_Status)
}
Robots_Status::Robots_Status(const Robots_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      robots_status_(from.robots_status_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Robots_Status)
}

void Robots_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robots_Status_zss_5fcmd_2eproto.base);
}

Robots_Status::~Robots_Status() {
  // @@protoc_insertion_point(destructor:ZSS.New.Robots_Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robots_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robots_Status::ArenaDtor(void* object) {
  Robots_Status* _this = reinterpret_cast< Robots_Status* >(object);
  (void)_this;
}
void Robots_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robots_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robots_Status& Robots_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robots_Status_zss_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Robots_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Robots_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robots_status_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robots_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.New.Robot_Status robots_status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_robots_status(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robots_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Robots_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.New.Robot_Status robots_status = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_robots_status_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_robots_status(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Robots_Status)
  return target;
}

size_t Robots_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Robots_Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.New.Robot_Status robots_status = 1;
  total_size += 1UL * this->_internal_robots_status_size();
  for (const auto& msg : this->robots_status_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robots_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robots_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Robots_Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Robots_Status)
    MergeFrom(*source);
  }
}

void Robots_Status::MergeFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Robots_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robots_status_.MergeFrom(from.robots_status_);
}

void Robots_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Status::CopyFrom(const Robots_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Robots_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Status::IsInitialized() const {
  return true;
}

void Robots_Status::InternalSwap(Robots_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  robots_status_.InternalSwap(&other->robots_status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robots_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Multicast_Status::InitAsDefaultInstance() {
}
class Multicast_Status::_Internal {
 public:
};

Multicast_Status::Multicast_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Multicast_Status)
}
Multicast_Status::Multicast_Status(const Multicast_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ip(),
      GetArena());
  }
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  ::memcpy(&team_, &from.team_,
    static_cast<size_t>(reinterpret_cast<char*>(&capacitance_) -
    reinterpret_cast<char*>(&team_)) + sizeof(capacitance_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Multicast_Status)
}

void Multicast_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Multicast_Status_zss_5fcmd_2eproto.base);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacitance_) -
      reinterpret_cast<char*>(&team_)) + sizeof(capacitance_));
}

Multicast_Status::~Multicast_Status() {
  // @@protoc_insertion_point(destructor:ZSS.New.Multicast_Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Multicast_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Multicast_Status::ArenaDtor(void* object) {
  Multicast_Status* _this = reinterpret_cast< Multicast_Status* >(object);
  (void)_this;
}
void Multicast_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Multicast_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Multicast_Status& Multicast_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Multicast_Status_zss_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Multicast_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Multicast_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&team_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&capacitance_) -
      reinterpret_cast<char*>(&team_)) + sizeof(capacitance_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Multicast_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string ip = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ZSS.New.Multicast_Status.ip"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string uuid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ZSS.New.Multicast_Status.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Team team = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_team(static_cast<::ZSS::New::Team>(val));
        } else goto handle_unusual;
        continue;
      // int32 robot_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float battery = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float capacitance = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          capacitance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Multicast_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Multicast_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZSS.New.Multicast_Status.ip");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip(), target);
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ZSS.New.Multicast_Status.uuid");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_uuid(), target);
  }

  // .ZSS.New.Team team = 3;
  if (this->team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_team(), target);
  }

  // int32 robot_id = 4;
  if (this->robot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_robot_id(), target);
  }

  // float battery = 5;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_battery(), target);
  }

  // float capacitance = 6;
  if (!(this->capacitance() <= 0 && this->capacitance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_capacitance(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Multicast_Status)
  return target;
}

size_t Multicast_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Multicast_Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // string uuid = 2;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .ZSS.New.Team team = 3;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  // int32 robot_id = 4;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());
  }

  // float battery = 5;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    total_size += 1 + 4;
  }

  // float capacitance = 6;
  if (!(this->capacitance() <= 0 && this->capacitance() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Multicast_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Multicast_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Multicast_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Multicast_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Multicast_Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Multicast_Status)
    MergeFrom(*source);
  }
}

void Multicast_Status::MergeFrom(const Multicast_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Multicast_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.ip().size() > 0) {
    _internal_set_ip(from._internal_ip());
  }
  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.team() != 0) {
    _internal_set_team(from._internal_team());
  }
  if (from.robot_id() != 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (!(from.battery() <= 0 && from.battery() >= 0)) {
    _internal_set_battery(from._internal_battery());
  }
  if (!(from.capacitance() <= 0 && from.capacitance() >= 0)) {
    _internal_set_capacitance(from._internal_capacitance());
  }
}

void Multicast_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Multicast_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Multicast_Status::CopyFrom(const Multicast_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Multicast_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Multicast_Status::IsInitialized() const {
  return true;
}

void Multicast_Status::InternalSwap(Multicast_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ip_.Swap(&other->ip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Multicast_Status, capacitance_)
      + sizeof(Multicast_Status::capacitance_)
      - PROTOBUF_FIELD_OFFSET(Multicast_Status, team_)>(
          reinterpret_cast<char*>(&team_),
          reinterpret_cast<char*>(&other->team_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Multicast_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot_Status::InitAsDefaultInstance() {
  ::ZSS::New::_Robot_Status_default_instance_._instance.get_mutable()->odom_ = const_cast< ::ZSS::New::Odom*>(
      ::ZSS::New::Odom::internal_default_instance());
}
class Robot_Status::_Internal {
 public:
  static const ::ZSS::New::Odom& odom(const Robot_Status* msg);
};

const ::ZSS::New::Odom&
Robot_Status::_Internal::odom(const Robot_Status* msg) {
  return *msg->odom_;
}
void Robot_Status::clear_odom() {
  if (GetArena() == nullptr && odom_ != nullptr) {
    delete odom_;
  }
  odom_ = nullptr;
}
Robot_Status::Robot_Status(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  wheel_encoder_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Robot_Status)
}
Robot_Status::Robot_Status(const Robot_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      wheel_encoder_(from.wheel_encoder_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_odom()) {
    odom_ = new ::ZSS::New::Odom(*from.odom_);
  } else {
    odom_ = nullptr;
  }
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&team_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(team_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Robot_Status)
}

void Robot_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_Status_zss_5fcmd_2eproto.base);
  ::memset(&odom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&odom_)) + sizeof(team_));
}

Robot_Status::~Robot_Status() {
  // @@protoc_insertion_point(destructor:ZSS.New.Robot_Status)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot_Status::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete odom_;
}

void Robot_Status::ArenaDtor(void* object) {
  Robot_Status* _this = reinterpret_cast< Robot_Status* >(object);
  (void)_this;
}
void Robot_Status::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot_Status& Robot_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_Status_zss_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Robot_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Robot_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  wheel_encoder_.Clear();
  if (GetArena() == nullptr && odom_ != nullptr) {
    delete odom_;
  }
  odom_ = nullptr;
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&team_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(team_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float infrared = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          infrared_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float flat_kick = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          flat_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float chip_kick = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          chip_kick_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float imu_theta = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          imu_theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float battery = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          battery_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float capacitance = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          capacitance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Odom odom = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_odom(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float wheel_encoder = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_wheel_encoder(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77) {
          _internal_add_wheel_encoder(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Team team = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_team(static_cast<::ZSS::New::Team>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_Status::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Robot_Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // float infrared = 2;
  if (!(this->infrared() <= 0 && this->infrared() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_infrared(), target);
  }

  // float flat_kick = 3;
  if (!(this->flat_kick() <= 0 && this->flat_kick() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_flat_kick(), target);
  }

  // float chip_kick = 4;
  if (!(this->chip_kick() <= 0 && this->chip_kick() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_chip_kick(), target);
  }

  // float imu_theta = 5;
  if (!(this->imu_theta() <= 0 && this->imu_theta() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_imu_theta(), target);
  }

  // float battery = 6;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_battery(), target);
  }

  // float capacitance = 7;
  if (!(this->capacitance() <= 0 && this->capacitance() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_capacitance(), target);
  }

  // .ZSS.New.Odom odom = 8;
  if (this->has_odom()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::odom(this), target, stream);
  }

  // repeated float wheel_encoder = 9;
  if (this->_internal_wheel_encoder_size() > 0) {
    target = stream->WriteFixedPacked(9, _internal_wheel_encoder(), target);
  }

  // .ZSS.New.Team team = 10;
  if (this->team() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_team(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Robot_Status)
  return target;
}

size_t Robot_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Robot_Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float wheel_encoder = 9;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_wheel_encoder_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _wheel_encoder_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .ZSS.New.Odom odom = 8;
  if (this->has_odom()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *odom_);
  }

  // int32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());
  }

  // float infrared = 2;
  if (!(this->infrared() <= 0 && this->infrared() >= 0)) {
    total_size += 1 + 4;
  }

  // float flat_kick = 3;
  if (!(this->flat_kick() <= 0 && this->flat_kick() >= 0)) {
    total_size += 1 + 4;
  }

  // float chip_kick = 4;
  if (!(this->chip_kick() <= 0 && this->chip_kick() >= 0)) {
    total_size += 1 + 4;
  }

  // float imu_theta = 5;
  if (!(this->imu_theta() <= 0 && this->imu_theta() >= 0)) {
    total_size += 1 + 4;
  }

  // float battery = 6;
  if (!(this->battery() <= 0 && this->battery() >= 0)) {
    total_size += 1 + 4;
  }

  // float capacitance = 7;
  if (!(this->capacitance() <= 0 && this->capacitance() >= 0)) {
    total_size += 1 + 4;
  }

  // .ZSS.New.Team team = 10;
  if (this->team() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_team());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Robot_Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Robot_Status)
    MergeFrom(*source);
  }
}

void Robot_Status::MergeFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Robot_Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  wheel_encoder_.MergeFrom(from.wheel_encoder_);
  if (from.has_odom()) {
    _internal_mutable_odom()->::ZSS::New::Odom::MergeFrom(from._internal_odom());
  }
  if (from.robot_id() != 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (!(from.infrared() <= 0 && from.infrared() >= 0)) {
    _internal_set_infrared(from._internal_infrared());
  }
  if (!(from.flat_kick() <= 0 && from.flat_kick() >= 0)) {
    _internal_set_flat_kick(from._internal_flat_kick());
  }
  if (!(from.chip_kick() <= 0 && from.chip_kick() >= 0)) {
    _internal_set_chip_kick(from._internal_chip_kick());
  }
  if (!(from.imu_theta() <= 0 && from.imu_theta() >= 0)) {
    _internal_set_imu_theta(from._internal_imu_theta());
  }
  if (!(from.battery() <= 0 && from.battery() >= 0)) {
    _internal_set_battery(from._internal_battery());
  }
  if (!(from.capacitance() <= 0 && from.capacitance() >= 0)) {
    _internal_set_capacitance(from._internal_capacitance());
  }
  if (from.team() != 0) {
    _internal_set_team(from._internal_team());
  }
}

void Robot_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Status::CopyFrom(const Robot_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Robot_Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Status::IsInitialized() const {
  return true;
}

void Robot_Status::InternalSwap(Robot_Status* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  wheel_encoder_.InternalSwap(&other->wheel_encoder_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Status, team_)
      + sizeof(Robot_Status::team_)
      - PROTOBUF_FIELD_OFFSET(Robot_Status, odom_)>(
          reinterpret_cast<char*>(&odom_),
          reinterpret_cast<char*>(&other->odom_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robots_Command::InitAsDefaultInstance() {
}
class Robots_Command::_Internal {
 public:
  using HasBits = decltype(std::declval<Robots_Command>()._has_bits_);
  static void set_has_delay(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Robots_Command::Robots_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  command_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Robots_Command)
}
Robots_Command::Robots_Command(const Robots_Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      command_(from.command_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  delay_ = from.delay_;
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Robots_Command)
}

void Robots_Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robots_Command_zss_5fcmd_2eproto.base);
  delay_ = 0;
}

Robots_Command::~Robots_Command() {
  // @@protoc_insertion_point(destructor:ZSS.New.Robots_Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robots_Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Robots_Command::ArenaDtor(void* object) {
  Robots_Command* _this = reinterpret_cast< Robots_Command* >(object);
  (void)_this;
}
void Robots_Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robots_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robots_Command& Robots_Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robots_Command_zss_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Robots_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Robots_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  command_.Clear();
  delay_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robots_Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ZSS.New.Robot_Command command = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_command(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 delay = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_delay(&has_bits);
          delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robots_Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Robots_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ZSS.New.Robot_Command command = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_command_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_command(i), target, stream);
  }

  // int32 delay = 2;
  if (_internal_has_delay()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Robots_Command)
  return target;
}

size_t Robots_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Robots_Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ZSS.New.Robot_Command command = 1;
  total_size += 1UL * this->_internal_command_size();
  for (const auto& msg : this->command_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 delay = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_delay());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robots_Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robots_Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robots_Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Robots_Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Robots_Command)
    MergeFrom(*source);
  }
}

void Robots_Command::MergeFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Robots_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  command_.MergeFrom(from.command_);
  if (from._internal_has_delay()) {
    _internal_set_delay(from._internal_delay());
  }
}

void Robots_Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robots_Command::CopyFrom(const Robots_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Robots_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robots_Command::IsInitialized() const {
  return true;
}

void Robots_Command::InternalSwap(Robots_Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  command_.InternalSwap(&other->command_);
  swap(delay_, other->delay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Robots_Command::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Robot_Command::InitAsDefaultInstance() {
  ::ZSS::New::_Robot_Command_default_instance_._instance.get_mutable()->cmd_vel_ = const_cast< ::ZSS::New::CmdVel*>(
      ::ZSS::New::CmdVel::internal_default_instance());
  ::ZSS::New::_Robot_Command_default_instance_._instance.get_mutable()->cmd_pose_ = const_cast< ::ZSS::New::CmdPose*>(
      ::ZSS::New::CmdPose::internal_default_instance());
  ::ZSS::New::_Robot_Command_default_instance_._instance.get_mutable()->cmd_chase_ = const_cast< ::ZSS::New::CmdChase*>(
      ::ZSS::New::CmdChase::internal_default_instance());
  ::ZSS::New::_Robot_Command_default_instance_._instance.get_mutable()->cmd_wheel_ = const_cast< ::ZSS::New::CmdWheel*>(
      ::ZSS::New::CmdWheel::internal_default_instance());
}
class Robot_Command::_Internal {
 public:
  static const ::ZSS::New::CmdVel& cmd_vel(const Robot_Command* msg);
  static const ::ZSS::New::CmdPose& cmd_pose(const Robot_Command* msg);
  static const ::ZSS::New::CmdChase& cmd_chase(const Robot_Command* msg);
  static const ::ZSS::New::CmdWheel& cmd_wheel(const Robot_Command* msg);
};

const ::ZSS::New::CmdVel&
Robot_Command::_Internal::cmd_vel(const Robot_Command* msg) {
  return *msg->cmd_vel_;
}
const ::ZSS::New::CmdPose&
Robot_Command::_Internal::cmd_pose(const Robot_Command* msg) {
  return *msg->cmd_pose_;
}
const ::ZSS::New::CmdChase&
Robot_Command::_Internal::cmd_chase(const Robot_Command* msg) {
  return *msg->cmd_chase_;
}
const ::ZSS::New::CmdWheel&
Robot_Command::_Internal::cmd_wheel(const Robot_Command* msg) {
  return *msg->cmd_wheel_;
}
void Robot_Command::clear_cmd_vel() {
  if (GetArena() == nullptr && cmd_vel_ != nullptr) {
    delete cmd_vel_;
  }
  cmd_vel_ = nullptr;
}
void Robot_Command::clear_cmd_pose() {
  if (GetArena() == nullptr && cmd_pose_ != nullptr) {
    delete cmd_pose_;
  }
  cmd_pose_ = nullptr;
}
void Robot_Command::clear_cmd_chase() {
  if (GetArena() == nullptr && cmd_chase_ != nullptr) {
    delete cmd_chase_;
  }
  cmd_chase_ = nullptr;
}
void Robot_Command::clear_cmd_wheel() {
  if (GetArena() == nullptr && cmd_wheel_ != nullptr) {
    delete cmd_wheel_;
  }
  cmd_wheel_ = nullptr;
}
Robot_Command::Robot_Command(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ZSS.New.Robot_Command)
}
Robot_Command::Robot_Command(const Robot_Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cmd_vel()) {
    cmd_vel_ = new ::ZSS::New::CmdVel(*from.cmd_vel_);
  } else {
    cmd_vel_ = nullptr;
  }
  if (from._internal_has_cmd_pose()) {
    cmd_pose_ = new ::ZSS::New::CmdPose(*from.cmd_pose_);
  } else {
    cmd_pose_ = nullptr;
  }
  if (from._internal_has_cmd_chase()) {
    cmd_chase_ = new ::ZSS::New::CmdChase(*from.cmd_chase_);
  } else {
    cmd_chase_ = nullptr;
  }
  if (from._internal_has_cmd_wheel()) {
    cmd_wheel_ = new ::ZSS::New::CmdWheel(*from.cmd_wheel_);
  } else {
    cmd_wheel_ = nullptr;
  }
  ::memcpy(&robot_id_, &from.robot_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&comm_type_) -
    reinterpret_cast<char*>(&robot_id_)) + sizeof(comm_type_));
  // @@protoc_insertion_point(copy_constructor:ZSS.New.Robot_Command)
}

void Robot_Command::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Robot_Command_zss_5fcmd_2eproto.base);
  ::memset(&cmd_vel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comm_type_) -
      reinterpret_cast<char*>(&cmd_vel_)) + sizeof(comm_type_));
}

Robot_Command::~Robot_Command() {
  // @@protoc_insertion_point(destructor:ZSS.New.Robot_Command)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Robot_Command::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete cmd_vel_;
  if (this != internal_default_instance()) delete cmd_pose_;
  if (this != internal_default_instance()) delete cmd_chase_;
  if (this != internal_default_instance()) delete cmd_wheel_;
}

void Robot_Command::ArenaDtor(void* object) {
  Robot_Command* _this = reinterpret_cast< Robot_Command* >(object);
  (void)_this;
}
void Robot_Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Robot_Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Robot_Command& Robot_Command::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Robot_Command_zss_5fcmd_2eproto.base);
  return *internal_default_instance();
}


void Robot_Command::Clear() {
// @@protoc_insertion_point(message_clear_start:ZSS.New.Robot_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && cmd_vel_ != nullptr) {
    delete cmd_vel_;
  }
  cmd_vel_ = nullptr;
  if (GetArena() == nullptr && cmd_pose_ != nullptr) {
    delete cmd_pose_;
  }
  cmd_pose_ = nullptr;
  if (GetArena() == nullptr && cmd_chase_ != nullptr) {
    delete cmd_chase_;
  }
  cmd_chase_ = nullptr;
  if (GetArena() == nullptr && cmd_wheel_ != nullptr) {
    delete cmd_wheel_;
  }
  cmd_wheel_ = nullptr;
  ::memset(&robot_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&comm_type_) -
      reinterpret_cast<char*>(&robot_id_)) + sizeof(comm_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Robot_Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 robot_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          robot_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Robot_Command.KickMode kick_mode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_kick_mode(static_cast<::ZSS::New::Robot_Command_KickMode>(val));
        } else goto handle_unusual;
        continue;
      // float desire_power = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          desire_power_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float kick_discharge_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          kick_discharge_time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float dribble_spin = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          dribble_spin_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bool need_report = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          need_report_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Robot_Command.CmdType cmd_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cmd_type(static_cast<::ZSS::New::Robot_Command_CmdType>(val));
        } else goto handle_unusual;
        continue;
      // .ZSS.New.CmdVel cmd_vel = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_vel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.CmdPose cmd_pose = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_pose(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.CmdChase cmd_chase = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_chase(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.CmdWheel cmd_wheel = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_cmd_wheel(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ZSS.New.Robot_Command.CommType comm_type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_comm_type(static_cast<::ZSS::New::Robot_Command_CommType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Robot_Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ZSS.New.Robot_Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 robot_id = 1;
  if (this->robot_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_robot_id(), target);
  }

  // .ZSS.New.Robot_Command.KickMode kick_mode = 2;
  if (this->kick_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_kick_mode(), target);
  }

  // float desire_power = 3;
  if (!(this->desire_power() <= 0 && this->desire_power() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_desire_power(), target);
  }

  // float kick_discharge_time = 4;
  if (!(this->kick_discharge_time() <= 0 && this->kick_discharge_time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_kick_discharge_time(), target);
  }

  // float dribble_spin = 5;
  if (!(this->dribble_spin() <= 0 && this->dribble_spin() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_dribble_spin(), target);
  }

  // bool need_report = 6;
  if (this->need_report() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_need_report(), target);
  }

  // .ZSS.New.Robot_Command.CmdType cmd_type = 7;
  if (this->cmd_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_cmd_type(), target);
  }

  // .ZSS.New.CmdVel cmd_vel = 8;
  if (this->has_cmd_vel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cmd_vel(this), target, stream);
  }

  // .ZSS.New.CmdPose cmd_pose = 9;
  if (this->has_cmd_pose()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cmd_pose(this), target, stream);
  }

  // .ZSS.New.CmdChase cmd_chase = 10;
  if (this->has_cmd_chase()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cmd_chase(this), target, stream);
  }

  // .ZSS.New.CmdWheel cmd_wheel = 11;
  if (this->has_cmd_wheel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::cmd_wheel(this), target, stream);
  }

  // .ZSS.New.Robot_Command.CommType comm_type = 12;
  if (this->comm_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_comm_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZSS.New.Robot_Command)
  return target;
}

size_t Robot_Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZSS.New.Robot_Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ZSS.New.CmdVel cmd_vel = 8;
  if (this->has_cmd_vel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_vel_);
  }

  // .ZSS.New.CmdPose cmd_pose = 9;
  if (this->has_cmd_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_pose_);
  }

  // .ZSS.New.CmdChase cmd_chase = 10;
  if (this->has_cmd_chase()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_chase_);
  }

  // .ZSS.New.CmdWheel cmd_wheel = 11;
  if (this->has_cmd_wheel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cmd_wheel_);
  }

  // int32 robot_id = 1;
  if (this->robot_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_robot_id());
  }

  // .ZSS.New.Robot_Command.KickMode kick_mode = 2;
  if (this->kick_mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_kick_mode());
  }

  // float desire_power = 3;
  if (!(this->desire_power() <= 0 && this->desire_power() >= 0)) {
    total_size += 1 + 4;
  }

  // float kick_discharge_time = 4;
  if (!(this->kick_discharge_time() <= 0 && this->kick_discharge_time() >= 0)) {
    total_size += 1 + 4;
  }

  // float dribble_spin = 5;
  if (!(this->dribble_spin() <= 0 && this->dribble_spin() >= 0)) {
    total_size += 1 + 4;
  }

  // bool need_report = 6;
  if (this->need_report() != 0) {
    total_size += 1 + 1;
  }

  // .ZSS.New.Robot_Command.CmdType cmd_type = 7;
  if (this->cmd_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cmd_type());
  }

  // .ZSS.New.Robot_Command.CommType comm_type = 12;
  if (this->comm_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_comm_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Robot_Command::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZSS.New.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  const Robot_Command* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Robot_Command>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZSS.New.Robot_Command)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZSS.New.Robot_Command)
    MergeFrom(*source);
  }
}

void Robot_Command::MergeFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZSS.New.Robot_Command)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_cmd_vel()) {
    _internal_mutable_cmd_vel()->::ZSS::New::CmdVel::MergeFrom(from._internal_cmd_vel());
  }
  if (from.has_cmd_pose()) {
    _internal_mutable_cmd_pose()->::ZSS::New::CmdPose::MergeFrom(from._internal_cmd_pose());
  }
  if (from.has_cmd_chase()) {
    _internal_mutable_cmd_chase()->::ZSS::New::CmdChase::MergeFrom(from._internal_cmd_chase());
  }
  if (from.has_cmd_wheel()) {
    _internal_mutable_cmd_wheel()->::ZSS::New::CmdWheel::MergeFrom(from._internal_cmd_wheel());
  }
  if (from.robot_id() != 0) {
    _internal_set_robot_id(from._internal_robot_id());
  }
  if (from.kick_mode() != 0) {
    _internal_set_kick_mode(from._internal_kick_mode());
  }
  if (!(from.desire_power() <= 0 && from.desire_power() >= 0)) {
    _internal_set_desire_power(from._internal_desire_power());
  }
  if (!(from.kick_discharge_time() <= 0 && from.kick_discharge_time() >= 0)) {
    _internal_set_kick_discharge_time(from._internal_kick_discharge_time());
  }
  if (!(from.dribble_spin() <= 0 && from.dribble_spin() >= 0)) {
    _internal_set_dribble_spin(from._internal_dribble_spin());
  }
  if (from.need_report() != 0) {
    _internal_set_need_report(from._internal_need_report());
  }
  if (from.cmd_type() != 0) {
    _internal_set_cmd_type(from._internal_cmd_type());
  }
  if (from.comm_type() != 0) {
    _internal_set_comm_type(from._internal_comm_type());
  }
}

void Robot_Command::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZSS.New.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Robot_Command::CopyFrom(const Robot_Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZSS.New.Robot_Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Robot_Command::IsInitialized() const {
  return true;
}

void Robot_Command::InternalSwap(Robot_Command* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Robot_Command, comm_type_)
      + sizeof(Robot_Command::comm_type_)
      - PROTOBUF_FIELD_OFFSET(Robot_Command, cmd_vel_)>(
          reinterpret_cast<char*>(&cmd_vel_),
          reinterpret_cast<char*>(&other->cmd_vel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Robot_Command::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace New
}  // namespace ZSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ZSS::New::Robots_Status* Arena::CreateMaybeMessage< ::ZSS::New::Robots_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Robots_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Multicast_Status* Arena::CreateMaybeMessage< ::ZSS::New::Multicast_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Multicast_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Robot_Status* Arena::CreateMaybeMessage< ::ZSS::New::Robot_Status >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Robot_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Robots_Command* Arena::CreateMaybeMessage< ::ZSS::New::Robots_Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Robots_Command >(arena);
}
template<> PROTOBUF_NOINLINE ::ZSS::New::Robot_Command* Arena::CreateMaybeMessage< ::ZSS::New::Robot_Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ZSS::New::Robot_Command >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
